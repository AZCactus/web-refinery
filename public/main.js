'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};window.app=angular.module('FullstackGeneratedApp',['fsaPreBuilt','ui.router','ui.bootstrap','ngAnimate','ngSanitize','textAngular','angular-loading-bar','fox.scrollReveal']);app.config(function($urlRouterProvider,$locationProvider){// This turns off hashbang urls (/#about) and changes it to something normal (/about)
$locationProvider.html5Mode(true);// If we go to a URL that ui-router doesn't have registered, go to the "/" url.
$urlRouterProvider.otherwise('/');// Trigger page refresh when accessing an OAuth route
$urlRouterProvider.when('/auth/:provider',function(){window.location.reload();});});app.config(['$provide',function($provide){// this demonstrates how to register a new tool and add it to the default toolbar
$provide.decorator('taOptions',['$delegate',function(taOptions){// $delegate is the taOptions we are decorating
// here we override the default toolbars and classes specified in taOptions.
taOptions.forceTextAngularSanitize=true;// set false to allow the textAngular-sanitize provider to be replaced
taOptions.keyMappings=[];// allow customizable keyMappings for specialized key boards or languages
taOptions.toolbar=[['h1','h2','h3','h4','h5','h6','p','pre','quote'],['bold','italics','underline','ul','ol','redo','undo','clear'],// ['justifyLeft','justifyCenter','justifyRight', 'justifyFull'],
['html','insertLink']];taOptions.classes={focussed:'focussed',toolbar:'btn-toolbar',toolbarGroup:'btn-group',toolbarButton:'btn btn-default',toolbarButtonActive:'active',disabled:'disabled',textEditor:'form-control',htmlEditor:'form-control'};return taOptions;// whatever you return will be the taOptions
}]);}]);app.config(['cfpLoadingBarProvider',function(cfpLoadingBarProvider){cfpLoadingBarProvider.includeSpinner=false;}]);// This app.run is for controlling access to specific states.
app.run(function($rootScope,AuthService,$state){// The given state requires an authenticated user.
var destinationStateRequiresAuth=function destinationStateRequiresAuth(state){return state.data&&state.data.authenticate;};// $stateChangeStart is an event fired
// whenever the process of changing a state begins.
$rootScope.$on('$stateChangeStart',function(event,toState,toParams){if(!destinationStateRequiresAuth(toState)){// The destination state does not require authentication
// Short circuit with return.
return;}if(AuthService.isAuthenticated()){// The user is authenticated.
// Short circuit with return.
return;}// Cancel navigating to new state.
event.preventDefault();AuthService.getLoggedInUser().then(function(user){// If a user is retrieved, then renavigate to the destination
// (the second time, AuthService.isAuthenticated() will work)
// otherwise, if no user is logged in, go to "login" state.
if(user){$state.go(toState.name,toParams);}else{$state.go('login');}});});});app.config(function($stateProvider){// Register our *about* state.
$stateProvider.state('about',{url:'/about',controller:'AboutController',templateUrl:'js/about/about.html'});});app.controller('AboutController',function($scope,FullstackPics){// Images of beautiful Fullstack people.
$scope.images=_.shuffle(FullstackPics);});var thingToChange="color";var changeContent=function changeContent(){thingToChange="color";};var changeBackground=function changeBackground(){thingToChange="background-color";};var changeBorder=function changeBorder(){thingToChange="border-color";};var setWallpaper=function setWallpaper(selectedWallpaper){var beforeHtml=$('#skeleton').contents().find("body").html();var undoHtml="<body>\n"+beforeHtml+"</body>";undoArray.push(undoHtml);$("iframe").contents().find(".changeThis").css("background-image","url("+$(selectedWallpaper).parent().children()[0].currentSrc+")").css("background-size","100% 100%");};$(document).ready(function(){$("#colorpicker").spectrum({flat:true,showInput:true,showAlpha:true,showPalette:true,palette:[],color:"#000",move:function move(color){$("iframe").contents().find(".changeThis").css(thingToChange,color.toRgbString());$("iframe").contents().find(".changeThis").val(color.toRgbString());}});$("iframe").on('load').each(function(){//Using closures to capture each one
var iframe=$(this);iframe.on("load",function(){//Make sure it is fully loaded
iframe.contents().click(function(event){var counter=$("iframe").contents().find(".changeThis").length;if(counter>=1){$("iframe").contents().find(".changeThis").css("border","");$("iframe").contents().find(".ui-resizable").resizable().resizable("destroy");$("iframe").contents().find("*").removeClass("changeThis");$(event.target).addClass("changeThis").resizable();}$(event.target).addClass("changeThis").resizable();iframe.contents().mousedown(function(event){$(event.target).attr('draggable','true');});iframe.contents().mouseup(function(event){$(event.target).attr('draggable','false');});});});});});// Spectrum Colorpicker v1.8.0
// https://github.com/bgrins/spectrum
// Author: Brian Grinstead
// License: MIT
(function(factory){"use strict";if(typeof define==='function'&&define.amd){// AMD
define(['jquery'],factory);}else if((typeof exports==='undefined'?'undefined':_typeof(exports))=="object"&&(typeof module==='undefined'?'undefined':_typeof(module))=="object"){// CommonJS
module.exports=factory(require('jquery'));}else{// Browser
factory(jQuery);}})(function($,undefined){"use strict";var defaultOpts={// Callbacks
beforeShow:noop,move:noop,change:noop,show:noop,hide:noop,// Options
color:false,flat:false,showInput:false,allowEmpty:false,showButtons:true,clickoutFiresChange:true,showInitial:false,showPalette:false,showPaletteOnly:false,hideAfterPaletteSelect:false,togglePaletteOnly:false,showSelectionPalette:true,localStorageKey:false,appendTo:"body",maxSelectionSize:7,cancelText:"cancel",chooseText:"Save for Later",togglePaletteMoreText:"more",togglePaletteLessText:"less",clearText:"Clear Color Selection",noColorSelectedText:"No Color Selected",preferredFormat:false,className:"",// Deprecated - use containerClassName and replacerClassName instead.
containerClassName:"",replacerClassName:"",showAlpha:false,theme:"sp-light",palette:[["#ffffff","#000000","#ff0000","#ff8000","#ffff00","#008000","#0000ff","#4b0082","#9400d3"]],selectionPalette:[],disabled:false,offset:null},spectrums=[],IE=!!/msie/i.exec(window.navigator.userAgent),rgbaSupport=function(){function contains(str,substr){return!!~(''+str).indexOf(substr);}var elem=document.createElement('div');var style=elem.style;style.cssText='background-color:rgba(0,0,0,.5)';return contains(style.backgroundColor,'rgba')||contains(style.backgroundColor,'hsla');}(),replaceInput=["<div class='sp-replacer'>","<div class='sp-preview'><div class='sp-preview-inner'></div></div>","<div class='sp-dd'>&#9660;</div>","</div>"].join(''),markup=function(){// IE does not support gradients with multiple stops, so we need to simulate
//  that for the rainbow slider with 8 divs that each have a single gradient
var gradientFix="";if(IE){for(var i=1;i<=6;i++){gradientFix+="<div class='sp-"+i+"'></div>";}}return["<div class='sp-container sp-hidden'>","<div class='sp-palette-container'>","<div class='sp-palette sp-thumb sp-cf'></div>","<div class='sp-palette-button-container sp-cf'>","<button type='button' class='sp-palette-toggle'></button>","</div>","</div>","<div class='sp-picker-container'>","<div class='sp-top sp-cf'>","<div class='sp-fill'></div>","<div class='sp-top-inner'>","<div class='sp-color'>","<div class='sp-sat'>","<div class='sp-val'>","<div class='sp-dragger'></div>","</div>","</div>","</div>","<div class='sp-clear sp-clear-display'>","</div>","<div class='sp-hue'>","<div class='sp-slider'></div>",gradientFix,"</div>","</div>","<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>","</div>","<div class='sp-input-container sp-cf'>","<input class='sp-input' type='text' spellcheck='false'  />","</div>","<div class='sp-initial sp-thumb sp-cf'></div>","<div class='sp-button-container sp-cf'>",// "<a class='sp-cancel' href='#'></a>",
"<button type='button' class='sp-choose'></button>","</div>","</div>","</div>"].join("");}();function paletteTemplate(p,color,className,opts){var html=[];for(var i=0;i<p.length;i++){var current=p[i];if(current){var tiny=tinycolor(current);var c=tiny.toHsl().l<0.5?"sp-thumb-el sp-thumb-dark":"sp-thumb-el sp-thumb-light";c+=tinycolor.equals(color,current)?" sp-thumb-active":"";var formattedString=tiny.toString(opts.preferredFormat||"rgb");var swatchStyle=rgbaSupport?"background-color:"+tiny.toRgbString():"filter:"+tiny.toFilter();html.push('<span title="'+formattedString+'" data-color="'+tiny.toRgbString()+'" class="'+c+'"><span class="sp-thumb-inner" style="'+swatchStyle+';" /></span>');}else{var cls='sp-clear-display';html.push($('<div />').append($('<span data-color="" style="background-color:transparent;" class="'+cls+'"></span>').attr('title',opts.noColorSelectedText)).html());}}return"<div class='sp-cf "+className+"'>"+html.join('')+"</div>";}function hideAll(){for(var i=0;i<spectrums.length;i++){if(spectrums[i]){spectrums[i].hide();}}}function instanceOptions(o,callbackContext){var opts=$.extend({},defaultOpts,o);opts.callbacks={'move':bind(opts.move,callbackContext),'change':bind(opts.change,callbackContext),'show':bind(opts.show,callbackContext),'hide':bind(opts.hide,callbackContext),'beforeShow':bind(opts.beforeShow,callbackContext)};return opts;}function spectrum(element,o){var opts=instanceOptions(o,element),flat=opts.flat,showSelectionPalette=opts.showSelectionPalette,localStorageKey=opts.localStorageKey,theme=opts.theme,callbacks=opts.callbacks,resize=throttle(reflow,10),visible=false,isDragging=false,dragWidth=0,dragHeight=0,dragHelperHeight=0,slideHeight=0,slideWidth=0,alphaWidth=0,alphaSlideHelperWidth=0,slideHelperHeight=0,currentHue=0,currentSaturation=0,currentValue=0,currentAlpha=1,palette=[],paletteArray=[],paletteLookup={},selectionPalette=opts.selectionPalette.slice(0),maxSelectionSize=opts.maxSelectionSize,draggingClass="sp-dragging",shiftMovementDirection=null;var doc=element.ownerDocument,body=doc.body,boundElement=$(element),disabled=false,container=$(markup,doc).addClass(theme),pickerContainer=container.find(".sp-picker-container"),dragger=container.find(".sp-color"),dragHelper=container.find(".sp-dragger"),slider=container.find(".sp-hue"),slideHelper=container.find(".sp-slider"),alphaSliderInner=container.find(".sp-alpha-inner"),alphaSlider=container.find(".sp-alpha"),alphaSlideHelper=container.find(".sp-alpha-handle"),textInput=container.find(".sp-input"),paletteContainer=container.find(".sp-palette"),initialColorContainer=container.find(".sp-initial"),cancelButton=container.find(".sp-cancel"),clearButton=container.find(".sp-clear"),chooseButton=container.find(".sp-choose"),toggleButton=container.find(".sp-palette-toggle"),isInput=boundElement.is("input"),isInputTypeColor=isInput&&boundElement.attr("type")==="color"&&inputTypeColorSupport(),shouldReplace=isInput&&!flat,replacer=shouldReplace?$(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName):$([]),offsetElement=shouldReplace?replacer:boundElement,previewElement=replacer.find(".sp-preview-inner"),initialColor=opts.color||isInput&&boundElement.val(),colorOnShow=false,currentPreferredFormat=opts.preferredFormat,clickoutFiresChange=!opts.showButtons||opts.clickoutFiresChange,isEmpty=!initialColor,allowEmpty=opts.allowEmpty&&!isInputTypeColor;function applyOptions(){if(opts.showPaletteOnly){opts.showPalette=true;}toggleButton.text(opts.showPaletteOnly?opts.togglePaletteMoreText:opts.togglePaletteLessText);if(opts.palette){palette=opts.palette.slice(0);paletteArray=$.isArray(palette[0])?palette:[palette];paletteLookup={};for(var i=0;i<paletteArray.length;i++){for(var j=0;j<paletteArray[i].length;j++){var rgb=tinycolor(paletteArray[i][j]).toRgbString();paletteLookup[rgb]=true;}}}container.toggleClass("sp-flat",flat);container.toggleClass("sp-input-disabled",!opts.showInput);container.toggleClass("sp-alpha-enabled",opts.showAlpha);container.toggleClass("sp-clear-enabled",allowEmpty);container.toggleClass("sp-buttons-disabled",!opts.showButtons);container.toggleClass("sp-palette-buttons-disabled",!opts.togglePaletteOnly);container.toggleClass("sp-palette-disabled",!opts.showPalette);container.toggleClass("sp-palette-only",opts.showPaletteOnly);container.toggleClass("sp-initial-disabled",!opts.showInitial);container.addClass(opts.className).addClass(opts.containerClassName);reflow();}function initialize(){if(IE){container.find("*:not(input)").attr("unselectable","on");}applyOptions();if(shouldReplace){boundElement.after(replacer).hide();}if(!allowEmpty){clearButton.hide();}if(flat){boundElement.after(container).hide();}else{var appendTo=opts.appendTo==="parent"?boundElement.parent():$(opts.appendTo);if(appendTo.length!==1){appendTo=$("body");}appendTo.append(container);}updateSelectionPaletteFromStorage();offsetElement.bind("click.spectrum touchstart.spectrum",function(e){if(!disabled){toggle();}e.stopPropagation();if(!$(e.target).is("input")){e.preventDefault();}});if(boundElement.is(":disabled")||opts.disabled===true){disable();}// Prevent clicks from bubbling up to document.  This would cause it to be hidden.
container.click(stopPropagation);// Handle user typed input
textInput.change(setFromTextInput);textInput.bind("paste",function(){setTimeout(setFromTextInput,1);});textInput.keydown(function(e){if(e.keyCode==13){setFromTextInput();}});cancelButton.text(opts.cancelText);cancelButton.bind("click.spectrum",function(e){e.stopPropagation();e.preventDefault();revert();hide();});clearButton.attr("title",opts.clearText);clearButton.bind("click.spectrum",function(e){e.stopPropagation();e.preventDefault();isEmpty=true;move();if(flat){//for the flat style, this is a change event
updateOriginalInput(true);}});chooseButton.text(opts.chooseText);chooseButton.bind("click.spectrum",function(e){e.stopPropagation();e.preventDefault();if(IE&&textInput.is(":focus")){textInput.trigger('change');}if(isValid()){updateOriginalInput(true);hide();}});toggleButton.text(opts.showPaletteOnly?opts.togglePaletteMoreText:opts.togglePaletteLessText);toggleButton.bind("click.spectrum",function(e){e.stopPropagation();e.preventDefault();opts.showPaletteOnly=!opts.showPaletteOnly;// To make sure the Picker area is drawn on the right, next to the
// Palette area (and not below the palette), first move the Palette
// to the left to make space for the picker, plus 5px extra.
// The 'applyOptions' function puts the whole container back into place
// and takes care of the button-text and the sp-palette-only CSS class.
if(!opts.showPaletteOnly&&!flat){container.css('left','-='+(pickerContainer.outerWidth(true)+5));}applyOptions();});draggable(alphaSlider,function(dragX,dragY,e){currentAlpha=dragX/alphaWidth;isEmpty=false;if(e.shiftKey){currentAlpha=Math.round(currentAlpha*10)/10;}move();},dragStart,dragStop);draggable(slider,function(dragX,dragY){currentHue=parseFloat(dragY/slideHeight);isEmpty=false;if(!opts.showAlpha){currentAlpha=1;}move();},dragStart,dragStop);draggable(dragger,function(dragX,dragY,e){// shift+drag should snap the movement to either the x or y axis.
if(!e.shiftKey){shiftMovementDirection=null;}else if(!shiftMovementDirection){var oldDragX=currentSaturation*dragWidth;var oldDragY=dragHeight-currentValue*dragHeight;var furtherFromX=Math.abs(dragX-oldDragX)>Math.abs(dragY-oldDragY);shiftMovementDirection=furtherFromX?"x":"y";}var setSaturation=!shiftMovementDirection||shiftMovementDirection==="x";var setValue=!shiftMovementDirection||shiftMovementDirection==="y";if(setSaturation){currentSaturation=parseFloat(dragX/dragWidth);}if(setValue){currentValue=parseFloat((dragHeight-dragY)/dragHeight);}isEmpty=false;if(!opts.showAlpha){currentAlpha=1;}move();},dragStart,dragStop);if(!!initialColor){_set(initialColor);// In case color was black - update the preview UI and set the format
// since the set function will not run (default color is black).
updateUI();currentPreferredFormat=opts.preferredFormat||tinycolor(initialColor).format;addColorToSelectionPalette(initialColor);}else{updateUI();}if(flat){show();}function paletteElementClick(e){if(e.data&&e.data.ignore){_set($(e.target).closest(".sp-thumb-el").data("color"));move();}else{_set($(e.target).closest(".sp-thumb-el").data("color"));move();updateOriginalInput(true);if(opts.hideAfterPaletteSelect){hide();}}return false;}var paletteEvent=IE?"mousedown.spectrum":"click.spectrum touchstart.spectrum";paletteContainer.delegate(".sp-thumb-el",paletteEvent,paletteElementClick);initialColorContainer.delegate(".sp-thumb-el:nth-child(1)",paletteEvent,{ignore:true},paletteElementClick);}function updateSelectionPaletteFromStorage(){if(localStorageKey&&window.localStorage){// Migrate old palettes over to new format.  May want to remove this eventually.
try{var oldPalette=window.localStorage[localStorageKey].split(",#");if(oldPalette.length>1){delete window.localStorage[localStorageKey];$.each(oldPalette,function(i,c){addColorToSelectionPalette(c);});}}catch(e){}try{selectionPalette=window.localStorage[localStorageKey].split(";");}catch(e){}}}function addColorToSelectionPalette(color){if(showSelectionPalette){var rgb=tinycolor(color).toRgbString();if(!paletteLookup[rgb]&&$.inArray(rgb,selectionPalette)===-1){selectionPalette.push(rgb);while(selectionPalette.length>maxSelectionSize){selectionPalette.shift();}}if(localStorageKey&&window.localStorage){try{window.localStorage[localStorageKey]=selectionPalette.join(";");}catch(e){}}}}function getUniqueSelectionPalette(){var unique=[];if(opts.showPalette){for(var i=0;i<selectionPalette.length;i++){var rgb=tinycolor(selectionPalette[i]).toRgbString();if(!paletteLookup[rgb]){unique.push(selectionPalette[i]);}}}return unique.reverse().slice(0,opts.maxSelectionSize);}function drawPalette(){var currentColor=get();var html=$.map(paletteArray,function(palette,i){return paletteTemplate(palette,currentColor,"sp-palette-row sp-palette-row-"+i,opts);});updateSelectionPaletteFromStorage();if(selectionPalette){html.push(paletteTemplate(getUniqueSelectionPalette(),currentColor,"sp-palette-row sp-palette-row-selection",opts));}paletteContainer.html(html.join(""));}function drawInitial(){if(opts.showInitial){var initial=colorOnShow;var current=get();initialColorContainer.html(paletteTemplate([initial,current],current,"sp-palette-row-initial",opts));}}function dragStart(){if(dragHeight<=0||dragWidth<=0||slideHeight<=0){reflow();}isDragging=true;container.addClass(draggingClass);shiftMovementDirection=null;boundElement.trigger('dragstart.spectrum',[get()]);}function dragStop(){isDragging=false;container.removeClass(draggingClass);boundElement.trigger('dragstop.spectrum',[get()]);//UNDO FOR COLOR
var beforeHtml=$('#skeleton').contents().find("body").html();var undoHtml="<body>\n"+beforeHtml+"</body>";undoArray.push(undoHtml);//UNDO FOR COLOR
}function setFromTextInput(){var value=textInput.val();if((value===null||value==="")&&allowEmpty){_set(null);updateOriginalInput(true);}else{var tiny=tinycolor(value);if(tiny.isValid()){_set(tiny);updateOriginalInput(true);}else{textInput.addClass("sp-validation-error");}}}function toggle(){if(visible){hide();}else{show();}}function show(){var event=$.Event('beforeShow.spectrum');if(visible){reflow();return;}boundElement.trigger(event,[get()]);if(callbacks.beforeShow(get())===false||event.isDefaultPrevented()){return;}hideAll();visible=true;$(doc).bind("keydown.spectrum",onkeydown);$(doc).bind("click.spectrum",clickout);$(window).bind("resize.spectrum",resize);replacer.addClass("sp-active");container.removeClass("sp-hidden");reflow();updateUI();colorOnShow=get();drawInitial();callbacks.show(colorOnShow);boundElement.trigger('show.spectrum',[colorOnShow]);}function onkeydown(e){// Close on ESC
if(e.keyCode===27){hide();}}function clickout(e){// Return on right click.
if(e.button==2){return;}// If a drag event was happening during the mouseup, don't hide
// on click.
if(isDragging){return;}if(clickoutFiresChange){updateOriginalInput(true);}else{revert();}hide();}function hide(){// Return if hiding is unnecessary
if(!visible||flat){return;}visible=false;$(doc).unbind("keydown.spectrum",onkeydown);$(doc).unbind("click.spectrum",clickout);$(window).unbind("resize.spectrum",resize);replacer.removeClass("sp-active");container.addClass("sp-hidden");callbacks.hide(get());boundElement.trigger('hide.spectrum',[get()]);}function revert(){_set(colorOnShow,true);}function _set(color,ignoreFormatChange){if(tinycolor.equals(color,get())){// Update UI just in case a validation error needs
// to be cleared.
updateUI();return;}var newColor,newHsv;if(!color&&allowEmpty){isEmpty=true;}else{isEmpty=false;newColor=tinycolor(color);newHsv=newColor.toHsv();currentHue=newHsv.h%360/360;currentSaturation=newHsv.s;currentValue=newHsv.v;currentAlpha=newHsv.a;}updateUI();if(newColor&&newColor.isValid()&&!ignoreFormatChange){currentPreferredFormat=opts.preferredFormat||newColor.getFormat();}}function get(opts){opts=opts||{};if(allowEmpty&&isEmpty){return null;}return tinycolor.fromRatio({h:currentHue,s:currentSaturation,v:currentValue,a:Math.round(currentAlpha*100)/100},{format:opts.format||currentPreferredFormat});}function isValid(){return!textInput.hasClass("sp-validation-error");}function move(){updateUI();callbacks.move(get());boundElement.trigger('move.spectrum',[get()]);}function updateUI(){textInput.removeClass("sp-validation-error");updateHelperLocations();// Update dragger background color (gradients take care of saturation and value).
var flatColor=tinycolor.fromRatio({h:currentHue,s:1,v:1});dragger.css("background-color",flatColor.toHexString());// Get a format that alpha will be included in (hex and names ignore alpha)
var format=currentPreferredFormat;if(currentAlpha<1&&!(currentAlpha===0&&format==="name")){if(format==="hex"||format==="hex3"||format==="hex6"||format==="name"){format="rgb";}}var realColor=get({format:format}),displayColor='';//reset background info for preview element
previewElement.removeClass("sp-clear-display");previewElement.css('background-color','transparent');if(!realColor&&allowEmpty){// Update the replaced elements background with icon indicating no color selection
previewElement.addClass("sp-clear-display");}else{var realHex=realColor.toHexString(),realRgb=realColor.toRgbString();// Update the replaced elements background color (with actual selected color)
if(rgbaSupport||realColor.alpha===1){previewElement.css("background-color",realRgb);}else{previewElement.css("background-color","transparent");previewElement.css("filter",realColor.toFilter());}if(opts.showAlpha){var rgb=realColor.toRgb();rgb.a=0;var realAlpha=tinycolor(rgb).toRgbString();var gradient="linear-gradient(left, "+realAlpha+", "+realHex+")";if(IE){alphaSliderInner.css("filter",tinycolor(realAlpha).toFilter({gradientType:1},realHex));}else{alphaSliderInner.css("background","-webkit-"+gradient);alphaSliderInner.css("background","-moz-"+gradient);alphaSliderInner.css("background","-ms-"+gradient);// Use current syntax gradient on unprefixed property.
alphaSliderInner.css("background","linear-gradient(to right, "+realAlpha+", "+realHex+")");}}displayColor=realColor.toString(format);}// Update the text entry input as it changes happen
if(opts.showInput){textInput.val(displayColor);}if(opts.showPalette){drawPalette();}drawInitial();}function updateHelperLocations(){var s=currentSaturation;var v=currentValue;if(allowEmpty&&isEmpty){//if selected color is empty, hide the helpers
alphaSlideHelper.hide();slideHelper.hide();dragHelper.hide();}else{//make sure helpers are visible
alphaSlideHelper.show();slideHelper.show();dragHelper.show();// Where to show the little circle in that displays your current selected color
var dragX=s*dragWidth;var dragY=dragHeight-v*dragHeight;dragX=Math.max(-dragHelperHeight,Math.min(dragWidth-dragHelperHeight,dragX-dragHelperHeight));dragY=Math.max(-dragHelperHeight,Math.min(dragHeight-dragHelperHeight,dragY-dragHelperHeight));dragHelper.css({"top":dragY+"px","left":dragX+"px"});var alphaX=currentAlpha*alphaWidth;alphaSlideHelper.css({"left":alphaX-alphaSlideHelperWidth/2+"px"});// Where to show the bar that displays your current selected hue
var slideY=currentHue*slideHeight;slideHelper.css({"top":slideY-slideHelperHeight+"px"});}}function updateOriginalInput(fireCallback){var color=get(),displayColor='',hasChanged=!tinycolor.equals(color,colorOnShow);if(color){displayColor=color.toString(currentPreferredFormat);// Update the selection palette with the current color
addColorToSelectionPalette(color);}if(isInput){boundElement.val(displayColor);}if(fireCallback&&hasChanged){callbacks.change(color);boundElement.trigger('change',[color]);}}function reflow(){if(!visible){return;// Calculations would be useless and wouldn't be reliable anyways
}dragWidth=dragger.width();dragHeight=dragger.height();dragHelperHeight=dragHelper.height();slideWidth=slider.width();slideHeight=slider.height();slideHelperHeight=slideHelper.height();alphaWidth=alphaSlider.width();alphaSlideHelperWidth=alphaSlideHelper.width();if(!flat){container.css("position","absolute");if(opts.offset){container.offset(opts.offset);}else{container.offset(getOffset(container,offsetElement));}}updateHelperLocations();if(opts.showPalette){drawPalette();}boundElement.trigger('reflow.spectrum');}function destroy(){boundElement.show();offsetElement.unbind("click.spectrum touchstart.spectrum");container.remove();replacer.remove();spectrums[spect.id]=null;}function option(optionName,optionValue){if(optionName===undefined){return $.extend({},opts);}if(optionValue===undefined){return opts[optionName];}opts[optionName]=optionValue;if(optionName==="preferredFormat"){currentPreferredFormat=opts.preferredFormat;}applyOptions();}function enable(){disabled=false;boundElement.attr("disabled",false);offsetElement.removeClass("sp-disabled");}function disable(){hide();disabled=true;boundElement.attr("disabled",true);offsetElement.addClass("sp-disabled");}function setOffset(coord){opts.offset=coord;reflow();}initialize();var spect={show:show,hide:hide,toggle:toggle,reflow:reflow,option:option,enable:enable,disable:disable,offset:setOffset,set:function set(c){_set(c);updateOriginalInput();},get:get,destroy:destroy,container:container};spect.id=spectrums.push(spect)-1;return spect;}/**
    * checkOffset - get the offset below/above and left/right element depending on screen position
    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js
    */function getOffset(picker,input){var extraY=0;var dpWidth=picker.outerWidth();var dpHeight=picker.outerHeight();var inputHeight=input.outerHeight();var doc=picker[0].ownerDocument;var docElem=doc.documentElement;var viewWidth=docElem.clientWidth+$(doc).scrollLeft();var viewHeight=docElem.clientHeight+$(doc).scrollTop();var offset=input.offset();offset.top+=inputHeight;offset.left-=Math.min(offset.left,offset.left+dpWidth>viewWidth&&viewWidth>dpWidth?Math.abs(offset.left+dpWidth-viewWidth):0);offset.top-=Math.min(offset.top,offset.top+dpHeight>viewHeight&&viewHeight>dpHeight?Math.abs(dpHeight+inputHeight-extraY):extraY);return offset;}/**
    * noop - do nothing
    */function noop(){}/**
    * stopPropagation - makes the code only doing this a little easier to read in line
    */function stopPropagation(e){e.stopPropagation();}/**
    * Create a function bound to a given object
    * Thanks to underscore.js
    */function bind(func,obj){var slice=Array.prototype.slice;var args=slice.call(arguments,2);return function(){return func.apply(obj,args.concat(slice.call(arguments)));};}/**
    * Lightweight drag helper.  Handles containment within the element, so that
    * when dragging, the x is within [0,element.width] and y is within [0,element.height]
    */function draggable(element,onmove,onstart,onstop){onmove=onmove||function(){};onstart=onstart||function(){};onstop=onstop||function(){};var doc=document;var dragging=false;var offset={};var maxHeight=0;var maxWidth=0;var hasTouch='ontouchstart'in window;var duringDragEvents={};duringDragEvents["selectstart"]=prevent;duringDragEvents["dragstart"]=prevent;duringDragEvents["touchmove mousemove"]=move;duringDragEvents["touchend mouseup"]=stop;function prevent(e){if(e.stopPropagation){e.stopPropagation();}if(e.preventDefault){e.preventDefault();}e.returnValue=false;}function move(e){if(dragging){// Mouseup happened outside of window
if(IE&&doc.documentMode<9&&!e.button){return stop();}var t0=e.originalEvent&&e.originalEvent.touches&&e.originalEvent.touches[0];var pageX=t0&&t0.pageX||e.pageX;var pageY=t0&&t0.pageY||e.pageY;var dragX=Math.max(0,Math.min(pageX-offset.left,maxWidth));var dragY=Math.max(0,Math.min(pageY-offset.top,maxHeight));if(hasTouch){// Stop scrolling in iOS
prevent(e);}onmove.apply(element,[dragX,dragY,e]);}}function start(e){var rightclick=e.which?e.which==3:e.button==2;if(!rightclick&&!dragging){if(onstart.apply(element,arguments)!==false){dragging=true;maxHeight=$(element).height();maxWidth=$(element).width();offset=$(element).offset();$(doc).bind(duringDragEvents);$(doc.body).addClass("sp-dragging");move(e);prevent(e);}}}function stop(){if(dragging){$(doc).unbind(duringDragEvents);$(doc.body).removeClass("sp-dragging");// Wait a tick before notifying observers to allow the click event
// to fire in Chrome.
setTimeout(function(){onstop.apply(element,arguments);},0);}dragging=false;}$(element).bind("touchstart mousedown",start);}function throttle(func,wait,debounce){var timeout;return function(){var context=this,args=arguments;var throttler=function throttler(){timeout=null;func.apply(context,args);};if(debounce)clearTimeout(timeout);if(debounce||!timeout)timeout=setTimeout(throttler,wait);};}function inputTypeColorSupport(){return $.fn.spectrum.inputTypeColorSupport();}/**
    * Define a jQuery plugin
    */var dataID="spectrum.id";$.fn.spectrum=function(opts,extra){if(typeof opts=="string"){var returnValue=this;var args=Array.prototype.slice.call(arguments,1);this.each(function(){var spect=spectrums[$(this).data(dataID)];if(spect){var method=spect[opts];if(!method){throw new Error("Spectrum: no such method: '"+opts+"'");}if(opts=="get"){returnValue=spect.get();}else if(opts=="container"){returnValue=spect.container;}else if(opts=="option"){returnValue=spect.option.apply(spect,args);}else if(opts=="destroy"){spect.destroy();$(this).removeData(dataID);}else{method.apply(spect,args);}}});return returnValue;}// Initializing a new instance of spectrum
return this.spectrum("destroy").each(function(){var options=$.extend({},opts,$(this).data());var spect=spectrum(this,options);$(this).data(dataID,spect.id);});};$.fn.spectrum.load=true;$.fn.spectrum.loadOpts={};$.fn.spectrum.draggable=draggable;$.fn.spectrum.defaults=defaultOpts;$.fn.spectrum.inputTypeColorSupport=function inputTypeColorSupport(){if(typeof inputTypeColorSupport._cachedResult==="undefined"){var colorInput=$("<input type='color'/>")[0];// if color element is supported, value will default to not null
inputTypeColorSupport._cachedResult=colorInput.type==="color"&&colorInput.value!=="";}return inputTypeColorSupport._cachedResult;};$.spectrum={};$.spectrum.localization={};$.spectrum.palettes={};$.fn.spectrum.processNativeColorInputs=function(){var colorInputs=$("input[type=color]");if(colorInputs.length&&!inputTypeColorSupport()){colorInputs.spectrum({preferredFormat:"hex6"});}};// TinyColor v1.1.2
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License
(function(){var trimLeft=/^[\s,#]+/,trimRight=/\s+$/,tinyCounter=0,math=Math,mathRound=math.round,mathMin=math.min,mathMax=math.max,mathRandom=math.random;var tinycolor=function tinycolor(color,opts){color=color?color:'';opts=opts||{};// If input is already a tinycolor, return itself
if(color instanceof tinycolor){return color;}// If we are called as a function, call using new instead
if(!(this instanceof tinycolor)){return new tinycolor(color,opts);}var rgb=inputToRGB(color);this._originalInput=color,this._r=rgb.r,this._g=rgb.g,this._b=rgb.b,this._a=rgb.a,this._roundA=mathRound(100*this._a)/100,this._format=opts.format||rgb.format;this._gradientType=opts.gradientType;// Don't let the range of [0,255] come back in [0,1].
// Potentially lose a little bit of precision here, but will fix issues where
// .5 gets interpreted as half of the total, instead of half of 1
// If it was supposed to be 128, this was already taken care of by `inputToRgb`
if(this._r<1){this._r=mathRound(this._r);}if(this._g<1){this._g=mathRound(this._g);}if(this._b<1){this._b=mathRound(this._b);}this._ok=rgb.ok;this._tc_id=tinyCounter++;};tinycolor.prototype={isDark:function isDark(){return this.getBrightness()<128;},isLight:function isLight(){return!this.isDark();},isValid:function isValid(){return this._ok;},getOriginalInput:function getOriginalInput(){return this._originalInput;},getFormat:function getFormat(){return this._format;},getAlpha:function getAlpha(){return this._a;},getBrightness:function getBrightness(){var rgb=this.toRgb();return(rgb.r*299+rgb.g*587+rgb.b*114)/1000;},setAlpha:function setAlpha(value){this._a=boundAlpha(value);this._roundA=mathRound(100*this._a)/100;return this;},toHsv:function toHsv(){var hsv=rgbToHsv(this._r,this._g,this._b);return{h:hsv.h*360,s:hsv.s,v:hsv.v,a:this._a};},toHsvString:function toHsvString(){var hsv=rgbToHsv(this._r,this._g,this._b);var h=mathRound(hsv.h*360),s=mathRound(hsv.s*100),v=mathRound(hsv.v*100);return this._a==1?"hsv("+h+", "+s+"%, "+v+"%)":"hsva("+h+", "+s+"%, "+v+"%, "+this._roundA+")";},toHsl:function toHsl(){var hsl=rgbToHsl(this._r,this._g,this._b);return{h:hsl.h*360,s:hsl.s,l:hsl.l,a:this._a};},toHslString:function toHslString(){var hsl=rgbToHsl(this._r,this._g,this._b);var h=mathRound(hsl.h*360),s=mathRound(hsl.s*100),l=mathRound(hsl.l*100);return this._a==1?"hsl("+h+", "+s+"%, "+l+"%)":"hsla("+h+", "+s+"%, "+l+"%, "+this._roundA+")";},toHex:function toHex(allow3Char){return rgbToHex(this._r,this._g,this._b,allow3Char);},toHexString:function toHexString(allow3Char){return'#'+this.toHex(allow3Char);},toHex8:function toHex8(){return rgbaToHex(this._r,this._g,this._b,this._a);},toHex8String:function toHex8String(){return'#'+this.toHex8();},toRgb:function toRgb(){return{r:mathRound(this._r),g:mathRound(this._g),b:mathRound(this._b),a:this._a};},toRgbString:function toRgbString(){return this._a==1?"rgb("+mathRound(this._r)+", "+mathRound(this._g)+", "+mathRound(this._b)+")":"rgba("+mathRound(this._r)+", "+mathRound(this._g)+", "+mathRound(this._b)+", "+this._roundA+")";},toPercentageRgb:function toPercentageRgb(){return{r:mathRound(bound01(this._r,255)*100)+"%",g:mathRound(bound01(this._g,255)*100)+"%",b:mathRound(bound01(this._b,255)*100)+"%",a:this._a};},toPercentageRgbString:function toPercentageRgbString(){return this._a==1?"rgb("+mathRound(bound01(this._r,255)*100)+"%, "+mathRound(bound01(this._g,255)*100)+"%, "+mathRound(bound01(this._b,255)*100)+"%)":"rgba("+mathRound(bound01(this._r,255)*100)+"%, "+mathRound(bound01(this._g,255)*100)+"%, "+mathRound(bound01(this._b,255)*100)+"%, "+this._roundA+")";},toName:function toName(){if(this._a===0){return"transparent";}if(this._a<1){return false;}return hexNames[rgbToHex(this._r,this._g,this._b,true)]||false;},toFilter:function toFilter(secondColor){var hex8String='#'+rgbaToHex(this._r,this._g,this._b,this._a);var secondHex8String=hex8String;var gradientType=this._gradientType?"GradientType = 1, ":"";if(secondColor){var s=tinycolor(secondColor);secondHex8String=s.toHex8String();}return"progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";},toString:function toString(format){var formatSet=!!format;format=format||this._format;var formattedString=false;var hasAlpha=this._a<1&&this._a>=0;var needsAlphaFormat=!formatSet&&hasAlpha&&(format==="hex"||format==="hex6"||format==="hex3"||format==="name");if(needsAlphaFormat){// Special case for "transparent", all other non-alpha formats
// will return rgba when there is transparency.
if(format==="name"&&this._a===0){return this.toName();}return this.toRgbString();}if(format==="rgb"){formattedString=this.toRgbString();}if(format==="prgb"){formattedString=this.toPercentageRgbString();}if(format==="hex"||format==="hex6"){formattedString=this.toHexString();}if(format==="hex3"){formattedString=this.toHexString(true);}if(format==="hex8"){formattedString=this.toHex8String();}if(format==="name"){formattedString=this.toName();}if(format==="hsl"){formattedString=this.toHslString();}if(format==="hsv"){formattedString=this.toHsvString();}return formattedString||this.toHexString();},_applyModification:function _applyModification(fn,args){var color=fn.apply(null,[this].concat([].slice.call(args)));this._r=color._r;this._g=color._g;this._b=color._b;this.setAlpha(color._a);return this;},lighten:function lighten(){return this._applyModification(_lighten,arguments);},brighten:function brighten(){return this._applyModification(_brighten,arguments);},darken:function darken(){return this._applyModification(_darken,arguments);},desaturate:function desaturate(){return this._applyModification(_desaturate,arguments);},saturate:function saturate(){return this._applyModification(_saturate,arguments);},greyscale:function greyscale(){return this._applyModification(_greyscale,arguments);},spin:function spin(){return this._applyModification(_spin,arguments);},_applyCombination:function _applyCombination(fn,args){return fn.apply(null,[this].concat([].slice.call(args)));},analogous:function analogous(){return this._applyCombination(_analogous,arguments);},complement:function complement(){return this._applyCombination(_complement,arguments);},monochromatic:function monochromatic(){return this._applyCombination(_monochromatic,arguments);},splitcomplement:function splitcomplement(){return this._applyCombination(_splitcomplement,arguments);},triad:function triad(){return this._applyCombination(_triad,arguments);},tetrad:function tetrad(){return this._applyCombination(_tetrad,arguments);}};// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio=function(color,opts){if((typeof color==='undefined'?'undefined':_typeof(color))=="object"){var newColor={};for(var i in color){if(color.hasOwnProperty(i)){if(i==="a"){newColor[i]=color[i];}else{newColor[i]=convertToPercentage(color[i]);}}}color=newColor;}return tinycolor(color,opts);};// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color){var rgb={r:0,g:0,b:0};var a=1;var ok=false;var format=false;if(typeof color=="string"){color=stringInputToObject(color);}if((typeof color==='undefined'?'undefined':_typeof(color))=="object"){if(color.hasOwnProperty("r")&&color.hasOwnProperty("g")&&color.hasOwnProperty("b")){rgb=rgbToRgb(color.r,color.g,color.b);ok=true;format=String(color.r).substr(-1)==="%"?"prgb":"rgb";}else if(color.hasOwnProperty("h")&&color.hasOwnProperty("s")&&color.hasOwnProperty("v")){color.s=convertToPercentage(color.s);color.v=convertToPercentage(color.v);rgb=hsvToRgb(color.h,color.s,color.v);ok=true;format="hsv";}else if(color.hasOwnProperty("h")&&color.hasOwnProperty("s")&&color.hasOwnProperty("l")){color.s=convertToPercentage(color.s);color.l=convertToPercentage(color.l);rgb=hslToRgb(color.h,color.s,color.l);ok=true;format="hsl";}if(color.hasOwnProperty("a")){a=color.a;}}a=boundAlpha(a);return{ok:ok,format:color.format||format,r:mathMin(255,mathMax(rgb.r,0)),g:mathMin(255,mathMax(rgb.g,0)),b:mathMin(255,mathMax(rgb.b,0)),a:a};}// Conversion Functions
// --------------------
// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r,g,b){return{r:bound01(r,255)*255,g:bound01(g,255)*255,b:bound01(b,255)*255};}// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r,g,b){r=bound01(r,255);g=bound01(g,255);b=bound01(b,255);var max=mathMax(r,g,b),min=mathMin(r,g,b);var h,s,l=(max+min)/2;if(max==min){h=s=0;// achromatic
}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return{h:h,s:s,l:l};}// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h,s,l){var r,g,b;h=bound01(h,360);s=bound01(s,100);l=bound01(l,100);function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p;}if(s===0){r=g=b=l;// achromatic
}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return{r:r*255,g:g*255,b:b*255};}// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r,g,b){r=bound01(r,255);g=bound01(g,255);b=bound01(b,255);var max=mathMax(r,g,b),min=mathMin(r,g,b);var h,s,v=max;var d=max-min;s=max===0?0:d/max;if(max==min){h=0;// achromatic
}else{switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return{h:h,s:s,v:v};}// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hsvToRgb(h,s,v){h=bound01(h,360)*6;s=bound01(s,100);v=bound01(v,100);var i=math.floor(h),f=h-i,p=v*(1-s),q=v*(1-f*s),t=v*(1-(1-f)*s),mod=i%6,r=[v,q,p,p,t,v][mod],g=[t,v,v,q,p,p][mod],b=[p,p,t,v,v,q][mod];return{r:r*255,g:g*255,b:b*255};}// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r,g,b,allow3Char){var hex=[pad2(mathRound(r).toString(16)),pad2(mathRound(g).toString(16)),pad2(mathRound(b).toString(16))];// Return a 3 character hex if possible
if(allow3Char&&hex[0].charAt(0)==hex[0].charAt(1)&&hex[1].charAt(0)==hex[1].charAt(1)&&hex[2].charAt(0)==hex[2].charAt(1)){return hex[0].charAt(0)+hex[1].charAt(0)+hex[2].charAt(0);}return hex.join("");}// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b and a are contained in the set [0, 255]
// Returns an 8 character hex
function rgbaToHex(r,g,b,a){var hex=[pad2(convertDecimalToHex(a)),pad2(mathRound(r).toString(16)),pad2(mathRound(g).toString(16)),pad2(mathRound(b).toString(16))];return hex.join("");}// `equals`
// Can be called with any tinycolor input
tinycolor.equals=function(color1,color2){if(!color1||!color2){return false;}return tinycolor(color1).toRgbString()==tinycolor(color2).toRgbString();};tinycolor.random=function(){return tinycolor.fromRatio({r:mathRandom(),g:mathRandom(),b:mathRandom()});};// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
function _desaturate(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.s-=amount/100;hsl.s=clamp01(hsl.s);return tinycolor(hsl);}function _saturate(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.s+=amount/100;hsl.s=clamp01(hsl.s);return tinycolor(hsl);}function _greyscale(color){return tinycolor(color).desaturate(100);}function _lighten(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.l+=amount/100;hsl.l=clamp01(hsl.l);return tinycolor(hsl);}function _brighten(color,amount){amount=amount===0?0:amount||10;var rgb=tinycolor(color).toRgb();rgb.r=mathMax(0,mathMin(255,rgb.r-mathRound(255*-(amount/100))));rgb.g=mathMax(0,mathMin(255,rgb.g-mathRound(255*-(amount/100))));rgb.b=mathMax(0,mathMin(255,rgb.b-mathRound(255*-(amount/100))));return tinycolor(rgb);}function _darken(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.l-=amount/100;hsl.l=clamp01(hsl.l);return tinycolor(hsl);}// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function _spin(color,amount){var hsl=tinycolor(color).toHsl();var hue=(mathRound(hsl.h)+amount)%360;hsl.h=hue<0?360+hue:hue;return tinycolor(hsl);}// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
function _complement(color){var hsl=tinycolor(color).toHsl();hsl.h=(hsl.h+180)%360;return tinycolor(hsl);}function _triad(color){var hsl=tinycolor(color).toHsl();var h=hsl.h;return[tinycolor(color),tinycolor({h:(h+120)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+240)%360,s:hsl.s,l:hsl.l})];}function _tetrad(color){var hsl=tinycolor(color).toHsl();var h=hsl.h;return[tinycolor(color),tinycolor({h:(h+90)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+180)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+270)%360,s:hsl.s,l:hsl.l})];}function _splitcomplement(color){var hsl=tinycolor(color).toHsl();var h=hsl.h;return[tinycolor(color),tinycolor({h:(h+72)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+216)%360,s:hsl.s,l:hsl.l})];}function _analogous(color,results,slices){results=results||6;slices=slices||30;var hsl=tinycolor(color).toHsl();var part=360/slices;var ret=[tinycolor(color)];for(hsl.h=(hsl.h-(part*results>>1)+720)%360;--results;){hsl.h=(hsl.h+part)%360;ret.push(tinycolor(hsl));}return ret;}function _monochromatic(color,results){results=results||6;var hsv=tinycolor(color).toHsv();var h=hsv.h,s=hsv.s,v=hsv.v;var ret=[];var modification=1/results;while(results--){ret.push(tinycolor({h:h,s:s,v:v}));v=(v+modification)%1;}return ret;}// Utility Functions
// ---------------------
tinycolor.mix=function(color1,color2,amount){amount=amount===0?0:amount||50;var rgb1=tinycolor(color1).toRgb();var rgb2=tinycolor(color2).toRgb();var p=amount/100;var w=p*2-1;var a=rgb2.a-rgb1.a;var w1;if(w*a==-1){w1=w;}else{w1=(w+a)/(1+w*a);}w1=(w1+1)/2;var w2=1-w1;var rgba={r:rgb2.r*w1+rgb1.r*w2,g:rgb2.g*w1+rgb1.g*w2,b:rgb2.b*w1+rgb1.b*w2,a:rgb2.a*p+rgb1.a*(1-p)};return tinycolor(rgba);};// Readability Functions
// ---------------------
// <http://www.w3.org/TR/AERT#color-contrast>
// `readability`
// Analyze the 2 colors and returns an object with the following properties:
//    `brightness`: difference in brightness between the two colors
//    `color`: difference in color/hue between the two colors
tinycolor.readability=function(color1,color2){var c1=tinycolor(color1);var c2=tinycolor(color2);var rgb1=c1.toRgb();var rgb2=c2.toRgb();var brightnessA=c1.getBrightness();var brightnessB=c2.getBrightness();var colorDiff=Math.max(rgb1.r,rgb2.r)-Math.min(rgb1.r,rgb2.r)+Math.max(rgb1.g,rgb2.g)-Math.min(rgb1.g,rgb2.g)+Math.max(rgb1.b,rgb2.b)-Math.min(rgb1.b,rgb2.b);return{brightness:Math.abs(brightnessA-brightnessB),color:colorDiff};};// `readable`
// http://www.w3.org/TR/AERT#color-contrast
// Ensure that foreground and background color combinations provide sufficient contrast.
// *Example*
//    tinycolor.isReadable("#000", "#111") => false
tinycolor.isReadable=function(color1,color2){var readability=tinycolor.readability(color1,color2);return readability.brightness>125&&readability.color>500;};// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// *Example*
//    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"
tinycolor.mostReadable=function(baseColor,colorList){var bestColor=null;var bestScore=0;var bestIsReadable=false;for(var i=0;i<colorList.length;i++){// We normalize both around the "acceptable" breaking point,
// but rank brightness constrast higher than hue.
var readability=tinycolor.readability(baseColor,colorList[i]);var readable=readability.brightness>125&&readability.color>500;var score=3*(readability.brightness/125)+readability.color/500;if(readable&&!bestIsReadable||readable&&bestIsReadable&&score>bestScore||!readable&&!bestIsReadable&&score>bestScore){bestIsReadable=readable;bestScore=score;bestColor=tinycolor(colorList[i]);}}return bestColor;};// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names=tinycolor.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"};// Make it easy to access colors via `hexNames[hex]`
var hexNames=tinycolor.hexNames=flip(names);// Utilities
// ---------
// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o){var flipped={};for(var i in o){if(o.hasOwnProperty(i)){flipped[o[i]]=i;}}return flipped;}// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a){a=parseFloat(a);if(isNaN(a)||a<0||a>1){a=1;}return a;}// Take input from [0, n] and return it as [0, 1]
function bound01(n,max){if(isOnePointZero(n)){n="100%";}var processPercent=isPercentage(n);n=mathMin(max,mathMax(0,parseFloat(n)));// Automatically convert percentage into number
if(processPercent){n=parseInt(n*max,10)/100;}// Handle floating point rounding errors
if(math.abs(n-max)<0.000001){return 1;}// Convert into [0, 1] range if it isn't already
return n%max/parseFloat(max);}// Force a number between 0 and 1
function clamp01(val){return mathMin(1,mathMax(0,val));}// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val){return parseInt(val,16);}// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n){return typeof n=="string"&&n.indexOf('.')!=-1&&parseFloat(n)===1;}// Check to see if string passed in is a percentage
function isPercentage(n){return typeof n==="string"&&n.indexOf('%')!=-1;}// Force a hex value to have 2 characters
function pad2(c){return c.length==1?'0'+c:''+c;}// Replace a decimal with it's percentage value
function convertToPercentage(n){if(n<=1){n=n*100+"%";}return n;}// Converts a decimal to a hex value
function convertDecimalToHex(d){return Math.round(parseFloat(d)*255).toString(16);}// Converts a hex value to a decimal
function convertHexToDecimal(h){return parseIntFromHex(h)/255;}var matchers=function(){// <http://www.w3.org/TR/css3-values/#integers>
var CSS_INTEGER="[-\\+]?\\d+%?";// <http://www.w3.org/TR/css3-values/#number-value>
var CSS_NUMBER="[-\\+]?\\d*\\.\\d+%?";// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
var CSS_UNIT="(?:"+CSS_NUMBER+")|(?:"+CSS_INTEGER+")";// Actual matching.
// Parentheses and commas are optional, but not required.
// Whitespace can take the place of commas or opening paren
var PERMISSIVE_MATCH3="[\\s|\\(]+("+CSS_UNIT+")[,|\\s]+("+CSS_UNIT+")[,|\\s]+("+CSS_UNIT+")\\s*\\)?";var PERMISSIVE_MATCH4="[\\s|\\(]+("+CSS_UNIT+")[,|\\s]+("+CSS_UNIT+")[,|\\s]+("+CSS_UNIT+")[,|\\s]+("+CSS_UNIT+")\\s*\\)?";return{rgb:new RegExp("rgb"+PERMISSIVE_MATCH3),rgba:new RegExp("rgba"+PERMISSIVE_MATCH4),hsl:new RegExp("hsl"+PERMISSIVE_MATCH3),hsla:new RegExp("hsla"+PERMISSIVE_MATCH4),hsv:new RegExp("hsv"+PERMISSIVE_MATCH3),hsva:new RegExp("hsva"+PERMISSIVE_MATCH4),hex3:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex8:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};}();// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color){color=color.replace(trimLeft,'').replace(trimRight,'').toLowerCase();var named=false;if(names[color]){color=names[color];named=true;}else if(color=='transparent'){return{r:0,g:0,b:0,a:0,format:"name"};}// Try to match string input using regular expressions.
// Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
// Just return an object and let the conversion functions handle that.
// This way the result will be the same whether the tinycolor is initialized with string or object.
var match;if(match=matchers.rgb.exec(color)){return{r:match[1],g:match[2],b:match[3]};}if(match=matchers.rgba.exec(color)){return{r:match[1],g:match[2],b:match[3],a:match[4]};}if(match=matchers.hsl.exec(color)){return{h:match[1],s:match[2],l:match[3]};}if(match=matchers.hsla.exec(color)){return{h:match[1],s:match[2],l:match[3],a:match[4]};}if(match=matchers.hsv.exec(color)){return{h:match[1],s:match[2],v:match[3]};}if(match=matchers.hsva.exec(color)){return{h:match[1],s:match[2],v:match[3],a:match[4]};}if(match=matchers.hex8.exec(color)){return{a:convertHexToDecimal(match[1]),r:parseIntFromHex(match[2]),g:parseIntFromHex(match[3]),b:parseIntFromHex(match[4]),format:named?"name":"hex8"};}if(match=matchers.hex6.exec(color)){return{r:parseIntFromHex(match[1]),g:parseIntFromHex(match[2]),b:parseIntFromHex(match[3]),format:named?"name":"hex"};}if(match=matchers.hex3.exec(color)){return{r:parseIntFromHex(match[1]+''+match[1]),g:parseIntFromHex(match[2]+''+match[2]),b:parseIntFromHex(match[3]+''+match[3]),format:named?"name":"hex"};}return false;}window.tinycolor=tinycolor;})();$(function(){if($.fn.spectrum.load){$.fn.spectrum.processNativeColorInputs();}});});app.controller('DashboardCtrl',function($scope,ProjectFactory,PageFactory,allProjects){$scope.projects=allProjects;});app.config(function($stateProvider){$stateProvider.state('dashboard',{url:'/dashboard',templateUrl:'js/dashboard/dashboard.html',controller:'DashboardCtrl',resolve:{allProjects:function allProjects(ProjectFactory){return ProjectFactory.getAll();}}});});app.config(function($stateProvider){$stateProvider.state('docs',{url:'/docs',templateUrl:'js/docs/docs.html'});});app.controller('EditorCtrl',function($scope,$timeout,fileUpload,ProjectFactory,PageFactory,currentProject,ImageFactory,GalleryFactory,allImages,$uibModal,$log){$('#skeleton').on('load',function(){//gets the entire htmt of ur <nav> tag
$scope.edit();});$scope.animationsEnabled=false;$scope.open=function(size){var modalInstance=$uibModal.open({animation:false,templateUrl:'js/modalInstance/editor.modal.html',controller:'ModalInstanceCtrl',size:size,resolve:{textSelected:function textSelected(){return $scope.textSelected;}}});// Runs when you click on update in the modal
modalInstance.result.then(function(editedModalText){$scope.textSelected=editedModalText;// $scope.textSelected.removeClass('alreadyEditable');
$($scope.textTag)[0].outerHTML=$scope.textSelected;$('#skeleton').contents().find('*').each(function(){$(this).removeClass('alreadyEditable');$(this).removeClass('dashedBorder');$(this).off('dblclick');});$scope.edit();// Runs if you click cancel in the modal
},function(){$log.info('Modal dismissed at: '+new Date());});};$scope.toggleAnimation=function(){$scope.animationsEnabled=!$scope.animationsEnabled;};//makes all elements in body editable
$scope.edit=function(){$('#skeleton').contents().find('h1,h2,h3,h4,h5,h6,p,span,button,a').each(function(){var self=$(this);var handlerIn=function handlerIn(){self.addClass('dashedBorder');};var handlerOut=function handlerOut(){self.removeClass('dashedBorder');};// Function to give the element that you
// are hovering over some style and remove it
// Only works with find('h1,h2,h3,h4,h5,h6,p,span,button,a')
if(self.text()!='')self.hover(handlerIn,handlerOut);if(!self.hasClass('alreadyEditable')){self.addClass('alreadyEditable');self.dblclick(function(){$scope.textSelected=$(this)[0].outerHTML;$scope.textTag=$(this);$scope.open();});}});};// Will make a hardcoded request to backend and use the archiver to zip up the project
$scope.currentProject=currentProject;$scope.projectUrl='hosted-projects/'+currentProject.id+'/index.html';$scope.allImages=allImages;$scope.upload=function(){var uploadUrl='/api/upload';var uploadObj={projectId:currentProject.id,file:$scope.file};if($scope.file.type!=="image/png"&&$scope.file.type!=="image/jpeg"&&$scope.file.type!=="image/jpg"){alert("Please upload an image");}else{return fileUpload.upload(uploadObj,uploadUrl).then(function(imageArray){$scope.allImages=imageArray;});}};$scope.addGalleryRow=GalleryFactory.addGalleryRow;$scope.removeLastRow=GalleryFactory.removeLastRow;$scope.newRow=GalleryFactory.newGalleryRow;});app.config(function($stateProvider){$stateProvider.state('editor',{url:'/editor/:projectId',templateUrl:'js/editor/editor.html',controller:'EditorCtrl',resolve:{currentProject:function currentProject(ProjectFactory,$stateParams){return ProjectFactory.getOne($stateParams.projectId);},allImages:function allImages(ImageFactory,$stateParams){return ImageFactory.getAllImages($stateParams.projectId);}}});});//Changed Code -
//$(clientFrameWindow.document.body).find('.reserved-drop-marker').remove();
//$(event.target).append("<p class='reserved-drop-marker'></p>");
var undoArray=[];var addToArray=function addToArray(html){// saves HTML to array
if(undoArray.length>10){undoArray.shift();undoArray.push(html);}undoArray.push(html);};$(function(){// first push to undo array
$("#skeleton").on("load",function(){var beforeHtml=$('#skeleton').contents().find("body").html();var undoHtml="<body>\n"+beforeHtml+"</body>";undoArray.push(undoHtml);// as our outer/main window
var clientFrameWindow=$('#skeleton').get(0).contentWindow;//Add CSS File to iFrame
//----------------------
// Added here so that any page that we load will have the same styles
// that you see when dragging into the iframe (green and blue markers)
var style=$("<style id='originStyle' data-reserved-styletag></style>").html(GetInsertionCSS());$(clientFrameWindow.document.head).append(style);var htmlBody=$(clientFrameWindow.document).find('body,html');// Code to make items within the iframe draggable - START
htmlBody.on('dragstart',function(event){dragoverqueue_processtimer=setInterval(function(){DragDropFunctions.ProcessDragOverQueue();},100);// lowered to 10 to make dragging within iframe
var htmlElement=event.target.outerHTML;elementToRemove=$(event.target);elementToRemoveTest=$(event);event.originalEvent.dataTransfer.setData("Text",htmlElement);});htmlBody.on('dragend',function(event){// Cancels action that was setup with setInterval
clearInterval(dragoverqueue_processtimer);DragDropFunctions.removePlaceholder();DragDropFunctions.ClearContainerContext();elementToRemove.remove();// Get HTML and add to undoArray
var beforeHtml=$('#skeleton').contents().find("body").html();var undoHtml="<body>\n"+beforeHtml+"</body>";addToArray(undoHtml);// angular.element(document.getElementsByTagName('element-menu')[0]).scope().edit();
});// Code to make items within the iframe draggable - END
// Register event for when something is dragged into the iframe
htmlBody.find('*').addBack().on('dragenter',function(event){event.stopPropagation();currentElement=$(event.target);currentElementChangeFlag=true;elementRectangle=event.target.getBoundingClientRect();countdown=1;// Register event for dragging event is over
}).on('dragover',function(event){// Important. Without preventDefault won't add to dom
event.preventDefault();event.stopPropagation();if(countdown%15!=0&&currentElementChangeFlag==false){countdown=countdown+1;return;}event=event||window.event;var x=event.originalEvent.clientX;var y=event.originalEvent.clientY;countdown=countdown+1;currentElementChangeFlag=false;var mousePosition={x:x,y:y};DragDropFunctions.AddEntryToDragOverQueue(currentElement,elementRectangle,mousePosition);});// Event that's first called when you drop an item into the iframe
$(clientFrameWindow.document).find('body,html').on('drop',function(event){event.preventDefault();event.stopPropagation();var e;if(event.isTrigger)e=triggerEvent.originalEvent;else var e=event.originalEvent;try{// dataTransfer setData added in dragstart event
if(/<[a-z][\s\S]*>/i.test(e.dataTransfer.getData('text'))){var textData=e.dataTransfer.getData('text');}else{// Get textData when you drag within the ifram
var textData=e.dataTransfer.getData('text');// elementToRemove.remove();
}var insertionPoint=$("#skeleton").contents().find(".drop-marker");var checkDiv=$(textData);checkDiv.removeClass('alreadyEditable');insertionPoint.after(checkDiv);insertionPoint.remove();angular.element(document.getElementsByTagName('element-menu')[0]).scope().edit();}catch(e){console.log(e);}});});var currentElement,currentElementChangeFlag,elementRectangle,countdown,dragoverqueue_processtimer,elementToRemove;// Dragstart/dragend HTML5 event
// Only items with the #dragitemslistcontainer will respond
$("#dragitemslistcontainer").on('dragstart',function(event){var insertingHTML;insertingHTML=$(event.target).attr('data-insert-html');dragoverqueue_processtimer=setInterval(function(){DragDropFunctions.ProcessDragOverQueue();},100);// data-insert-html holds html data. insertingHTML grabs that html
//old code i edited , changed it up top in insertingHTMl
// var insertingHTML = $(this).attr('data-insert-html');
// Event is jquery event. Comes with additional functions and properties
// OriginalEvent is the unmodified version
// DataTransfer holds data that will be transferred during drap/drop
event.originalEvent.dataTransfer.setData("Text",insertingHTML);});$("#dragitemslistcontainer").on('dragend',function(){// Cancels action that was setup with setInterval
clearInterval(dragoverqueue_processtimer);// Removes the outlines that you see when dragging in the iframe
// First one is the drop marker (blue) second represents the
// container that you're dropping the data in (green).
DragDropFunctions.removePlaceholder();DragDropFunctions.ClearContainerContext();// Get HTML and add to undoArray
var beforeHtml=$('#skeleton').contents().find("body").html();var undoHtml="<body>\n"+beforeHtml+"</body>";addToArray(undoHtml);//re runs the edit() function on our controller on every drop
//to recheck all the elements and make them editable
// angular.element(document.getElementsByTagName('element-menu')[0]).scope().edit();
});var DragDropFunctions={dragoverqueue:[],GetMouseBearingsPercentage:function GetMouseBearingsPercentage($element,elementRect,mousePos){if(!elementRect)elementRect=$element.get(0).getBoundingClientRect();var mousePosPercent_X=(mousePos.x-elementRect.left)/(elementRect.right-elementRect.left)*100;var mousePosPercent_Y=(mousePos.y-elementRect.top)/(elementRect.bottom-elementRect.top)*100;return{x:mousePosPercent_X,y:mousePosPercent_Y};},OrchestrateDragDrop:function OrchestrateDragDrop($element,elementRect,mousePos){//If no element is hovered or element hovered is the placeholder -> not valid -> return false;
if(!$element||$element.length==0||!elementRect||!mousePos)return false;if($element.is('html'))$element=$element.find('body');//Top and Bottom Area Percentage to trigger different case. [5% of top and bottom area gets reserved for this]
var breakPointNumber={x:5,y:5};var mousePercents=this.GetMouseBearingsPercentage($element,elementRect,mousePos);if(mousePercents.x>breakPointNumber.x&&mousePercents.x<100-breakPointNumber.x&&mousePercents.y>breakPointNumber.y&&mousePercents.y<100-breakPointNumber.y){//Case 1 -
$tempelement=$element.clone();$tempelement.find(".drop-marker").remove();if($tempelement.html()==""&&!this.checkVoidElement($tempelement)){if(mousePercents.y<90)return this.PlaceInside($element);}else if($tempelement.children().length==0){//text element detected
//console.log("Text Element");
this.DecideBeforeAfter($element,mousePercents);}else if($tempelement.children().length==1){//only 1 child element detected
//console.log("1 Child Element");
this.DecideBeforeAfter($element.children(":not(.drop-marker,[data-dragcontext-marker])").first(),mousePercents);}else{var positionAndElement=this.findNearestElement($element,mousePos.x,mousePos.y);this.DecideBeforeAfter(positionAndElement.el,mousePercents,mousePos);//more than 1 child element present
//console.log("More than 1 child detected");
}}else if(mousePercents.x<=breakPointNumber.x||mousePercents.y<=breakPointNumber.y){var validElement=null;if(mousePercents.y<=mousePercents.x)validElement=this.FindValidParent($element,'top');else validElement=this.FindValidParent($element,'left');if(validElement.is("body,html"))validElement=$("#skeleton").contents().find("body").children(":not(.drop-marker,[data-dragcontext-marker])").first();this.DecideBeforeAfter(validElement,mousePercents,mousePos);}else if(mousePercents.x>=100-breakPointNumber.x||mousePercents.y>=100-breakPointNumber.y){var validElement=null;if(mousePercents.y>=mousePercents.x)validElement=this.FindValidParent($element,'bottom');else validElement=this.FindValidParent($element,'right');if(validElement.is("body,html"))validElement=$("#skeleton").contents().find("body").children(":not(.drop-marker,[data-dragcontext-marker])").last();this.DecideBeforeAfter(validElement,mousePercents,mousePos);}},DecideBeforeAfter:function DecideBeforeAfter($targetElement,mousePercents,mousePos){if(mousePos){mousePercents=this.GetMouseBearingsPercentage($targetElement,null,mousePos);}/*if(!mousePercents)
             {
             mousePercents = this.GetMouseBearingsPercentage($targetElement, $targetElement.get(0).getBoundingClientRect(), mousePos);
             } */$orientation=$targetElement.css('display')=="inline"||$targetElement.css('display')=="inline-block";if($targetElement.is("br"))$orientation=false;if($orientation){if(mousePercents.x<50){return this.PlaceBefore($targetElement);}else{return this.PlaceAfter($targetElement);}}else{if(mousePercents.y<50){return this.PlaceBefore($targetElement);}else{return this.PlaceAfter($targetElement);}}},checkVoidElement:function checkVoidElement($element){var voidelements=['i','area','base','br','col','command','embed','hr','img','input','keygen','link','meta','param','video','iframe','source','track','wbr'];var selector=voidelements.join(",");if($element.is(selector))return true;else return false;},calculateDistance:function calculateDistance(elementData,mouseX,mouseY){return Math.sqrt(Math.pow(elementData.x-mouseX,2)+Math.pow(elementData.y-mouseY,2));},FindValidParent:function FindValidParent($element,direction){switch(direction){case"left":while(true){var elementRect=$element.get(0).getBoundingClientRect();var $tempElement=$element.parent();var tempelementRect=$tempElement.get(0).getBoundingClientRect();if($element.is("body"))return $element;if(Math.abs(tempelementRect.left-elementRect.left)==0)$element=$element.parent();else return $element;}break;case"right":while(true){var elementRect=$element.get(0).getBoundingClientRect();var $tempElement=$element.parent();var tempelementRect=$tempElement.get(0).getBoundingClientRect();if($element.is("body"))return $element;if(Math.abs(tempelementRect.right-elementRect.right)==0)$element=$element.parent();else return $element;}break;case"top":while(true){var elementRect=$element.get(0).getBoundingClientRect();var $tempElement=$element.parent();var tempelementRect=$tempElement.get(0).getBoundingClientRect();if($element.is("body"))return $element;if(Math.abs(tempelementRect.top-elementRect.top)==0)$element=$element.parent();else return $element;}break;case"bottom":while(true){var elementRect=$element.get(0).getBoundingClientRect();var $tempElement=$element.parent();var tempelementRect=$tempElement.get(0).getBoundingClientRect();if($element.is("body"))return $element;if(Math.abs(tempelementRect.bottom-elementRect.bottom)==0)$element=$element.parent();else return $element;}break;}},addPlaceHolder:function addPlaceHolder($element,position,placeholder){if(!placeholder)placeholder=this.getPlaceHolder();this.removePlaceholder();switch(position){case"before":placeholder.find(".message").html($element.parent().data('sh-dnd-error'));$element.before(placeholder);// console.log($element);
// console.log("BEFORE");
this.AddContainerContext($element,'sibling');break;case"after":placeholder.find(".message").html($element.parent().data('sh-dnd-error'));$element.after(placeholder);// console.log($element);
// console.log("AFTER");
this.AddContainerContext($element,'sibling');break;case"inside-prepend":placeholder.find(".message").html($element.data('sh-dnd-error'));$element.prepend(placeholder);this.AddContainerContext($element,'inside');// console.log($element);
// console.log("PREPEND");
break;case"inside-append":placeholder.find(".message").html($element.data('sh-dnd-error'));$element.append(placeholder);this.AddContainerContext($element,'inside');// console.log($element);
// console.log("APPEND");
break;}},removePlaceholder:function removePlaceholder(){$("#skeleton").contents().find(".drop-marker, dashedBorder").remove();},getPlaceHolder:function getPlaceHolder(){return $("<li class='drop-marker'></li>");},PlaceInside:function PlaceInside($element){var placeholder=this.getPlaceHolder();placeholder.addClass('horizontal').css('width',$element.width()+"px");this.addPlaceHolder($element,"inside-append",placeholder);},PlaceBefore:function PlaceBefore($element){var placeholder=this.getPlaceHolder();var inlinePlaceholder=$element.css('display')=="inline"||$element.css('display')=="inline-block";if($element.is("br")){inlinePlaceholder=false;}else if($element.is("td,th")){placeholder.addClass('horizontal').css('width',$element.width()+"px");return this.addPlaceHolder($element,"inside-prepend",placeholder);}if(inlinePlaceholder)placeholder.addClass("vertical").css('height',$element.innerHeight()+"px");else placeholder.addClass("horizontal").css('width',$element.parent().width()+"px");this.addPlaceHolder($element,"before",placeholder);},PlaceAfter:function PlaceAfter($element){var placeholder=this.getPlaceHolder();var inlinePlaceholder=$element.css('display')=="inline"||$element.css('display')=="inline-block";if($element.is("br")){inlinePlaceholder=false;}else if($element.is("td,th")){placeholder.addClass('horizontal').css('width',$element.width()+"px");return this.addPlaceHolder($element,"inside-append",placeholder);}if(inlinePlaceholder)placeholder.addClass("vertical").css('height',$element.innerHeight()+"px");else placeholder.addClass("horizontal").css('width',$element.parent().width()+"px");this.addPlaceHolder($element,"after",placeholder);},findNearestElement:function findNearestElement($container,clientX,clientY){var _this=this;var previousElData=null;var childElement=$container.children(":not(.drop-marker,[data-dragcontext-marker])");if(childElement.length>0){childElement.each(function(){if($(this).is(".drop-marker"))return;var offset=$(this).get(0).getBoundingClientRect();var distance=0;var distance1,distance2=null;var position='';var xPosition1=offset.left;var xPosition2=offset.right;var yPosition1=offset.top;var yPosition2=offset.bottom;var corner1=null;var corner2=null;//Parellel to Yaxis and intersecting with x axis
if(clientY>yPosition1&&clientY<yPosition2){if(clientX<xPosition1&&clientY<xPosition2){corner1={x:xPosition1,y:clientY,'position':'before'};}else{corner1={x:xPosition2,y:clientY,'position':'after'};}}//Parellel to xAxis and intersecting with Y axis
else if(clientX>xPosition1&&clientX<xPosition2){if(clientY<yPosition1&&clientY<yPosition2){corner1={x:clientX,y:yPosition1,'position':'before'};}else{corner1={x:clientX,y:yPosition2,'position':'after'};}}else{//runs if no element found!
if(clientX<xPosition1&&clientX<xPosition2){corner1={x:xPosition1,y:yPosition1,'position':'before'};//left top
corner2={x:xPosition1,y:yPosition2,'position':'after'};//left bottom
}else if(clientX>xPosition1&&clientX>xPosition2){//console.log('I m on the right of the element');
corner1={x:xPosition2,y:yPosition1,'position':'before'};//Right top
corner2={x:xPosition2,y:yPosition2,'position':'after'};//Right Bottom
}else if(clientY<yPosition1&&clientY<yPosition2){// console.log('I m on the top of the element');
corner1={x:xPosition1,y:yPosition1,'position':'before'};//Top Left
corner2={x:xPosition2,y:yPosition1,'position':'after'};//Top Right
}else if(clientY>yPosition1&&clientY>yPosition2){// console.log('I m on the bottom of the element');
corner1={x:xPosition1,y:yPosition2,'position':'before'};//Left bottom
corner2={x:xPosition2,y:yPosition2,'position':'after'};//Right Bottom
}}distance1=_this.calculateDistance(corner1,clientX,clientY);if(corner2!==null)distance2=_this.calculateDistance(corner2,clientX,clientY);if(distance1<distance2||distance2===null){distance=distance1;position=corner1.position;}else{distance=distance2;position=corner2.position;}if(previousElData!==null){if(previousElData.distance<distance){return true;//continue statement
}}previousElData={'el':this,'distance':distance,'xPosition1':xPosition1,'xPosition2':xPosition2,'yPosition1':yPosition1,'yPosition2':yPosition2,'position':position};});if(previousElData!==null){var position=previousElData.position;return{'el':$(previousElData.el),'position':position};}else{return false;}}},AddEntryToDragOverQueue:function AddEntryToDragOverQueue($element,elementRect,mousePos){var newEvent=[$element,elementRect,mousePos];this.dragoverqueue.push(newEvent);},ProcessDragOverQueue:function ProcessDragOverQueue($element,elementRect,mousePos){var processing=this.dragoverqueue.pop();this.dragoverqueue=[];if(processing&&processing.length==3){var $el=processing[0];var $elRect=processing[1];var mousePos=processing[2];// Most of the magic is in the OrchestrateDragDrop
this.OrchestrateDragDrop($el,$elRect,mousePos);}},GetContextMarker:function GetContextMarker(){$contextMarker=$("<div data-dragcontext-marker><span data-dragcontext-marker-text></span></div>");return $contextMarker;},AddContainerContext:function AddContainerContext($element,position){$contextMarker=this.GetContextMarker();this.ClearContainerContext();if($element.is('html,body')){position='inside';$element=$("#skeleton").contents().find("body");}switch(position){case"inside":this.PositionContextMarker($contextMarker,$element);if($element.hasClass('stackhive-nodrop-zone'))$contextMarker.addClass('invalid');var name=this.getElementName($element);$contextMarker.find('[data-dragcontext-marker-text]').html(name);if($("#skeleton").contents().find("body [data-sh-parent-marker]").length!=0)$("#skeleton").contents().find("body [data-sh-parent-marker]").first().before($contextMarker);else $("#skeleton").contents().find("body").append($contextMarker);break;case"sibling":this.PositionContextMarker($contextMarker,$element.parent());if($element.parent().hasClass('stackhive-nodrop-zone'))$contextMarker.addClass('invalid');var name=this.getElementName($element.parent());$contextMarker.find('[data-dragcontext-marker-text]').html(name);$contextMarker.attr("data-dragcontext-marker",name.toLowerCase());if($("#skeleton").contents().find("body [data-sh-parent-marker]").length!=0)$("#skeleton").contents().find("body [data-sh-parent-marker]").first().before($contextMarker);else $("#skeleton").contents().find("body").append($contextMarker);break;}},PositionContextMarker:function PositionContextMarker($contextMarker,$element){var rect=$element.get(0).getBoundingClientRect();$contextMarker.css({height:rect.height+4+"px",width:rect.width+4+"px",top:rect.top+$($("#skeleton").get(0).contentWindow).scrollTop()-2+"px",left:rect.left+$($("#skeleton").get(0).contentWindow).scrollLeft()-2+"px"});if(rect.top+$("#skeleton").contents().find("body").scrollTop()<24)$contextMarker.find("[data-dragcontext-marker-text]").css('top','0px');},ClearContainerContext:function ClearContainerContext(){$("#skeleton").contents().find('[data-dragcontext-marker]').remove();},getElementName:function getElementName($element){return $element.prop('tagName');}};var GetInsertionCSS=function GetInsertionCSS(){var styles=""+".reserved-drop-marker{width:100%;height:2px;background:#00a8ff;position:absolute}.reserved-drop-marker::after,.reserved-drop-marker::before{content:'';background:#00a8ff;height:7px;width:7px;position:absolute;border-radius:50%;top:-2px}.reserved-drop-marker::before{left:0}.reserved-drop-marker::after{right:0}";styles+="[data-dragcontext-marker],[data-sh-parent-marker]{outline:#19cd9d solid 2px;text-align:center;position:absolute;z-index:123456781;pointer-events:none;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif}[data-dragcontext-marker] [data-dragcontext-marker-text],[data-sh-parent-marker] [data-sh-parent-marker-text]{background:#19cd9d;color:#fff;padding:2px 10px;display:inline-block;font-size:14px;position:relative;top:-24px;min-width:121px;font-weight:700;pointer-events:none;z-index:123456782}[data-dragcontext-marker].invalid{outline:#dc044f solid 2px}[data-dragcontext-marker].invalid [data-dragcontext-marker-text]{background:#dc044f}[data-dragcontext-marker=body]{outline-offset:-2px}[data-dragcontext-marker=body] [data-dragcontext-marker-text]{top:0;position:fixed}";styles+='.dashedBorder{border: 2px dashed rgb(189, 195, 199)}.changeThis {border: 4px solid rgb(189, 195, 199)}.drop-marker{pointer-events:none;}.drop-marker.horizontal{background:#00adff;position:absolute;height:2px;list-style:none;visibility:visible!important;box-shadow:0 1px 2px rgba(255,255,255,.4),0 -1px 2px rgba(255,255,255,.4);z-index:123456789;text-align:center}.drop-marker.horizontal.topside{margin-top:0}.drop-marker.horizontal.bottomside{margin-top:2px}.drop-marker.horizontal:before{content:"";width:8px;height:8px;background:#00adff;border-radius:8px;margin-top:-3px;float:left;box-shadow:0 1px 2px rgba(255,255,255,.4),0 -1px 2px rgba(255,255,255,.4)}.drop-marker.horizontal:after{content:"";width:8px;height:8px;background:#00adff;border-radius:8px;margin-top:-3px;float:right;box-shadow:0 1px 2px rgba(255,255,255,.4),0 -1px 2px rgba(255,255,255,.4)}.drop-marker.vertical{height:50px;list-style:none;border:1px solid #00ADFF;position:absolute;margin-left:3px;display:inline;box-shadow:1px 0 2px rgba(255,255,255,.4),-1px 0 2px rgba(255,255,255,.4)}.drop-marker.vertical.leftside{margin-left:0}.drop-marker.vertical.rightside{margin-left:3px}.drop-marker.vertical:before{content:"";width:8px;height:8px;background:#00adff;border-radius:8px;margin-top:-4px;top:0;position:absolute;margin-left:-4px;box-shadow:1px 0 2px rgba(255,255,255,.4),-1px 0 2px rgba(255,255,255,.4)}.drop-marker.vertical:after{content:"";width:8px;height:8px;background:#00adff;border-radius:8px;margin-left:-4px;bottom:-4px;position:absolute;box-shadow:1px 0 2px rgba(255,255,255,.4),-1px 0 2px rgba(255,255,255,.4)}';return styles;};});//end of drag and drop from bar to iframe
(function(){'use strict';// Hope you didn't forget Angular! Duh-doy.
if(!window.angular)throw new Error('I can\'t find Angular!');var app=angular.module('fsaPreBuilt',[]);app.factory('Socket',function(){if(!window.io)throw new Error('socket.io not found!');return window.io(window.location.origin);});// AUTH_EVENTS is used throughout our app to
// broadcast and listen from and to the $rootScope
// for important events about authentication flow.
app.constant('AUTH_EVENTS',{loginSuccess:'auth-login-success',loginFailed:'auth-login-failed',logoutSuccess:'auth-logout-success',sessionTimeout:'auth-session-timeout',notAuthenticated:'auth-not-authenticated',notAuthorized:'auth-not-authorized'});app.factory('AuthInterceptor',function($rootScope,$q,AUTH_EVENTS){var statusDict={401:AUTH_EVENTS.notAuthenticated,403:AUTH_EVENTS.notAuthorized,419:AUTH_EVENTS.sessionTimeout,440:AUTH_EVENTS.sessionTimeout};return{responseError:function responseError(response){$rootScope.$broadcast(statusDict[response.status],response);return $q.reject(response);}};});app.config(function($httpProvider){$httpProvider.interceptors.push(['$injector',function($injector){return $injector.get('AuthInterceptor');}]);});app.service('AuthService',function($http,Session,$rootScope,AUTH_EVENTS,$q){function onSuccessfulLogin(response){var data=response.data;Session.create(data.id,data.user);$rootScope.$broadcast(AUTH_EVENTS.loginSuccess);return data.user;}// Uses the session factory to see if an
// authenticated user is currently registered.
this.isAuthenticated=function(){return!!Session.user;};this.getLoggedInUser=function(fromServer){// If an authenticated session exists, we
// return the user attached to that session
// with a promise. This ensures that we can
// always interface with this method asynchronously.
// Optionally, if true is given as the fromServer parameter,
// then this cached value will not be used.
if(this.isAuthenticated()&&fromServer!==true){return $q.when(Session.user);}// Make request GET /session.
// If it returns a user, call onSuccessfulLogin with the response.
// If it returns a 401 response, we catch it and instead resolve to null.
return $http.get('/session').then(onSuccessfulLogin).catch(function(){return null;});};this.login=function(credentials){return $http.post('/login',credentials).then(onSuccessfulLogin).catch(function(){return $q.reject({message:'Invalid login credentials.'});});};this.logout=function(){return $http.get('/logout').then(function(){Session.destroy();$rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);});};});app.service('Session',function($rootScope,AUTH_EVENTS){var self=this;$rootScope.$on(AUTH_EVENTS.notAuthenticated,function(){self.destroy();});$rootScope.$on(AUTH_EVENTS.sessionTimeout,function(){self.destroy();});this.id=null;this.user=null;this.create=function(sessionId,user){this.id=sessionId;this.user=user;};this.destroy=function(){this.id=null;this.user=null;};});})();app.config(function($stateProvider){$stateProvider.state('login',{url:'/login',templateUrl:'js/login/login.html',controller:'LoginCtrl'});});app.controller('LoginCtrl',function($scope,AuthService,$state){$scope.login={};$scope.error=null;$scope.sendLogin=function(loginInfo){$scope.error=null;AuthService.login(loginInfo).then(function(){$state.go('home');}).catch(function(){$scope.error='Invalid login credentials.';});};});app.controller('HomeCtrl',function($scope,userFactory,$state,AuthService){//jQuery is required to run this code
$(document).ready(function(){// Highlight the top nav as scrolling occurs
$(window).scroll(function(event){var height=$(window).scrollTop();if(height>300){$('#mainNav').addClass('affix');}else{$('#mainNav').removeClass('affix');}});scaleVideoContainer();initBannerVideoSize('.video-container .poster img');initBannerVideoSize('.video-container .filter');initBannerVideoSize('.video-container video');$(window).on('resize',function(){scaleVideoContainer();scaleBannerVideoSize('.video-container .poster img');scaleBannerVideoSize('.video-container .filter');scaleBannerVideoSize('.video-container video');});});function scaleVideoContainer(){var height=$(window).height()+5;var unitHeight=parseInt(height)+'px';$('.homepage-hero-module').css('height',unitHeight);}function initBannerVideoSize(element){$(element).each(function(){$(this).data('height',$(this).height());$(this).data('width',$(this).width());});scaleBannerVideoSize(element);}function scaleBannerVideoSize(element){var windowWidth=$(window).width(),windowHeight=$(window).height()+5,videoWidth,videoHeight;$(element).each(function(){var videoAspectRatio=$(this).data('height')/$(this).data('width');$(this).width(windowWidth);if(windowWidth<1000){videoHeight=windowHeight;videoWidth=videoHeight/videoAspectRatio;$(this).css({'margin-top':0,'margin-left':-(videoWidth-windowWidth)/2+'px'});$(this).width(videoWidth).height(videoHeight);}$('.homepage-hero-module .video-container video').addClass('fadeIn animated');});}function closeModal(){$('#myModal').modal('hide');$('body').removeClass('modal-open');$('.modal-backdrop').remove();}//modal usercreation page.
$scope.createuser=function(user){userFactory.createUser($scope.user).then(function(){var obj={email:$scope.user.email,password:$scope.user.password};closeModal();AuthService.login(obj).then(function(){$state.go('dashboard');}).catch(function(){console.log("ERROR!");});}).catch(function(){console.log("ERROR!");});};});app.config(function($stateProvider){$stateProvider.state('home',{url:'/',templateUrl:'js/home/home.html',controller:'HomeCtrl'});});app.controller('ModalInstanceCtrl',function($scope,$uibModalInstance,textSelected){$scope.textSelected=textSelected;$scope.ok=function(){$uibModalInstance.close($scope.textSelected);};$scope.cancel=function(){$uibModalInstance.dismiss('cancel');};});app.config(function($stateProvider){$stateProvider.state('membersOnly',{url:'/members-area',template:'<img ng-repeat="item in stash" width="300" ng-src="{{ item }}" />',controller:function controller($scope,SecretStash){SecretStash.getStash().then(function(stash){$scope.stash=stash;});},// The following data.authenticate is read by an event listener
// that controls access to this state. Refer to app.js.
data:{authenticate:true}});});app.factory('SecretStash',function($http){var getStash=function getStash(){return $http.get('/api/members/secret-stash').then(function(response){return response.data;});};return{getStash:getStash};});app.controller('NewCtrl',function($scope,ProjectFactory,PageFactory,$state,allTemplates){$scope.error=null;$scope.templates=allTemplates;$scope.newProject=function(newProjectInfo){if(!newProjectInfo.template)newProjectInfo.template=$scope.templates[0].title;$scope.error=null;ProjectFactory.create(newProjectInfo).then(function(newProject){// Return newly created project: id, title, template info
// Use $state to redirect to editor for the given id
$state.go('editor',{projectId:newProject.id});}).catch(function(){$scope.error='Please fill out everything.';});};$scope.new={template:$scope.templates[0].title};});app.config(function($stateProvider){$stateProvider.state('new',{url:'/dashboard/new',templateUrl:'js/new/new.html',controller:'NewCtrl',resolve:{//get all the templates in an array we can then use it in our scope
allTemplates:function allTemplates(TemplateFactory){return TemplateFactory.fetchAll();}}});});app.factory('FullstackPics',function(){return['https://pbs.twimg.com/media/B7gBXulCAAAXQcE.jpg:large','https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-xap1/t31.0-8/10862451_10205622990359241_8027168843312841137_o.jpg','https://pbs.twimg.com/media/B-LKUshIgAEy9SK.jpg','https://pbs.twimg.com/media/B79-X7oCMAAkw7y.jpg','https://pbs.twimg.com/media/B-Uj9COIIAIFAh0.jpg:large','https://pbs.twimg.com/media/B6yIyFiCEAAql12.jpg:large','https://pbs.twimg.com/media/CE-T75lWAAAmqqJ.jpg:large','https://pbs.twimg.com/media/CEvZAg-VAAAk932.jpg:large','https://pbs.twimg.com/media/CEgNMeOXIAIfDhK.jpg:large','https://pbs.twimg.com/media/CEQyIDNWgAAu60B.jpg:large','https://pbs.twimg.com/media/CCF3T5QW8AE2lGJ.jpg:large','https://pbs.twimg.com/media/CAeVw5SWoAAALsj.jpg:large','https://pbs.twimg.com/media/CAaJIP7UkAAlIGs.jpg:large','https://pbs.twimg.com/media/CAQOw9lWEAAY9Fl.jpg:large','https://pbs.twimg.com/media/B-OQbVrCMAANwIM.jpg:large','https://pbs.twimg.com/media/B9b_erwCYAAwRcJ.png:large','https://pbs.twimg.com/media/B5PTdvnCcAEAl4x.jpg:large','https://pbs.twimg.com/media/B4qwC0iCYAAlPGh.jpg:large','https://pbs.twimg.com/media/B2b33vRIUAA9o1D.jpg:large','https://pbs.twimg.com/media/BwpIwr1IUAAvO2_.jpg:large','https://pbs.twimg.com/media/BsSseANCYAEOhLw.jpg:large','https://pbs.twimg.com/media/CJ4vLfuUwAAda4L.jpg:large','https://pbs.twimg.com/media/CI7wzjEVEAAOPpS.jpg:large','https://pbs.twimg.com/media/CIdHvT2UsAAnnHV.jpg:large','https://pbs.twimg.com/media/CGCiP_YWYAAo75V.jpg:large','https://pbs.twimg.com/media/CIS4JPIWIAI37qu.jpg:large'];});app.factory('GalleryFactory',function(){var $gallery;$('#skeleton').on('load',function(){$gallery=$('#skeleton').contents().find('#gallery');});var newGalleryRow='<div class = \'row\'>\n    <div class = \'col-md-4\'><h3 class=\'text-center\'>Title</h3></div>\n    <div class = \'col-md-4\'><h3 class=\'text-center\'>Title</h3></div>\n    <div class = \'col-md-4\'><h3 class=\'text-center\'>Title</h3></div>\n    </div>';return{removeLastRow:function removeLastRow(){$gallery=$('#skeleton').contents().find('#gallery');if($gallery.children().length>1)$gallery.children().last().remove();},newGalleryRow:newGalleryRow};});app.factory('ImageFactory',function($http){var imageFactory={};var getData=function getData(res){return res.data;};//this is the array to store on the scope of editor controller
//on every upload, we add to this array and force the dom to re-render with the new image
imageFactory.imageCache=[];imageFactory.getAllImages=function(projectId){return $http.get('/api/image/'+projectId).then(function(res){imageFactory.imageCache=res.data;return res.data;});};return imageFactory;});app.factory('NavbarFactory',function(){var Navbar=function Navbar(outerHTML){this.classes=[];this.links=[];this.html=outerHTML;};Navbar.prototype.parseNavbar=function(){var classString=this.html.match(/<nav.+class="(.*?)"/)[1];var classArray=classString.split(' ');var links=this.html.match(/(<li.+>[\s\S]+?<\/li>)/g);links=links.map(function(link){return{html:link.replace(/\s{2,}/g,''),name:link.replace(/\s{2,}/g,'').match(/<a.*?>([\S]+?)</)[1]};});this.links=links;this.classes=classArray;};Navbar.prototype.createLink=function(name){var nameParsed=name.replace(' ','_');var html='<li class="nav-item">\n                <a class="nav-link" href="#'+nameParsed+'">'+name+'</a>\n                </li>';this.links.push({html:html,name:name});var newSection='<section id=\''+nameParsed+'\'>\n          <div class=\'row\' >\n            <h1>'+name+'</h1>\n            <p class="lead">Complete with pre-defined file paths that you won\'t have to change!!</p>\n            <ul class="list-unstyled">\n                <li>Bootstrap v3.3.7</li>\n                <li>Made with Bootstrap and Web Refinery</li>\n            </ul>\n        </div>\n        </section>';$('#skeleton').contents().find('#contentColumn').append(newSection);return html;};Navbar.prototype.addClasses=function(classArray){this.classes=classArray;};Navbar.prototype.createNavbar=function(){var classes=' " '+this.classes.join(' ')+' " ';var classCode='class = '+classes;this.html='<nav '+classCode+'>';};Navbar.prototype.toggleClass=function(classString){var index=this.classes.indexOf(classString);if(index>-1){$('#skeleton').contents().find('nav').removeClass(classString);this.classes.splice(index,1);}else{$('#skeleton').contents().find('nav').addClass(classString);this.classes.push(classString);}};Navbar.prototype.align=function(side){if(side==='top'){$('#skeleton').contents().find('nav').removeClass('navbar-fixed-bottom navbar-fixed-side');$('#skeleton').contents().find('nav').addClass('navbar-fixed-top');$('#skeleton').contents().find('body').css('padding-top','70px');$('#skeleton').contents().find('#navbarColumn').addClass('col-sm-3 col-lg-12 text-center');$('#skeleton').contents().find('#contentColumn').addClass('col-sm-9 col-lg-12 text-center');}else if(side==='bottom'){$('#skeleton').contents().find('nav').removeClass('navbar-fixed-top navbar-fixed-side');$('#skeleton').contents().find('nav').addClass('navbar-fixed-bottom');$('#skeleton').contents().find('body').css('padding-top','0px');$('#skeleton').contents().find('body').css('padding-bottom','70px');$('#skeleton').contents().find('#contentColumn').removeClass();$('#skeleton').contents().find('#navbarColumn').addClass('col-sm-3 col-lg-12 text-center');$('#skeleton').contents().find('#contentColumn').addClass('col-sm-9 col-lg-12 text-center');}else if(side==='left'){$('#skeleton').contents().find('nav').removeClass('navbar-fixed-bottom navbar-fixed-top');$('#skeleton').contents().find('nav').addClass('navbar-fixed-side');$('#skeleton').contents().find('body').css('padding-top','0px');$('#skeleton').contents().find('#navbarColumn').removeClass();$('#skeleton').contents().find('#contentColumn').removeClass();$('#skeleton').contents().find('#navbarColumn').addClass('col-sm-3 col-lg-2');$('#skeleton').contents().find('#contentColumn').addClass('col-sm-9 col-lg-10');}else if(side==='right'){$('#skeleton').contents().find('nav').removeClass('navbar-fixed-bottom navbar-fixed-top');$('#skeleton').contents().find('nav').addClass('navbar-fixed-side');$('#skeleton').contents().find('body').css('padding-top','0px');$('#skeleton').contents().find('#navbarColumn').removeClass();$('#skeleton').contents().find('#contentColumn').removeClass();$('#skeleton').contents().find('#navbarColumn').addClass('col-sm-3 col-lg-2 col-sm-push-9 col-lg-push-10');$('#skeleton').contents().find('#contentColumn').addClass('col-sm-9 col-lg-10 col-sm-pull-3 col-lg-pull-2');}};return{Navbar:Navbar};});app.factory('PageFactory',function($http){var pageFactory={};var getData=function getData(res){return res.data;};//saves page to the backend
pageFactory.savePage=function(obj){return $http.post('/api/page',obj).then(getData);};//fetch pages for a specific project
pageFactory.getPage=function(projectId){return $http.get('/api/page').then(getData);};return pageFactory;});app.factory('ProjectFactory',function($http){var projectFactory={};var baseUrl='/api/project/';var getData=function getData(res){return res.data;};// creates project
projectFactory.create=function(obj){return $http.post(baseUrl,obj).then(getData);};// retrieves project
projectFactory.getAll=function(){return $http.get(baseUrl).then(getData);};projectFactory.getOne=function(id){return $http.get(baseUrl+id).then(getData);};// projectFactory.download = function(id) {
//     return $http.get(baseUrl + id + '/download');
// }
// deletes project
projectFactory.deleteProject=function(projectId){return $http.delete(baseUrl+projectId).then(getData);};return projectFactory;});app.factory('TemplateFactory',function($http){var templateFactory={};//called from our new state (new.js) in the resolve
templateFactory.fetchAll=function(){return $http.get('/api/templates/').then(function(templateArray){return templateArray.data;});};return templateFactory;});app.factory('userFactory',function($http){var userFactory={};var getData=function getData(res){return res.data;};var baseUrl='/api/user/';userFactory.createUser=function(obj){return $http.post(baseUrl,obj).then(getData);};return userFactory;});// app.directive('dataInsertHtml', ['$parse', function ($parse,$compile) {
//     return {
//         scope: {allImages: '='},
//         restrict: 'A',
//         link: function(scope, element, attrs) {
//             var model = $parse(attrs.dataInsertHtml);
//             var modelSetter = model.assign;
//             scope.$watch(allImages, function(){
//                 console.log('heahrhaerhae')
//                 scope.$apply(function(){
//                     modelSetter(scope, element[0].files[0]);
//                 });
//             });
//         }
//     };
// }]);
app.directive('elementMenu',function(){return{transclude:true,restrict:'E',templateUrl:'js/common/directives/element-menu/element-menu.html',link:function link(scope,element,attr){scope.click=function($event){var currentElement=$($event.currentTarget);if(currentElement.hasClass("activeCategory")){currentElement.removeClass("activeCategory");}else{$(".mySideNav").find("*").removeClass("activeCategory");$(".mySideNav").find(".collapse.in").collapse('hide');currentElement.addClass("activeCategory");}};}};});app.directive('fileModel',['$parse',function($parse){return{scope:false,restrict:'A',link:function link(scope,element,attrs){var model=$parse(attrs.fileModel);var modelSetter=model.assign;element.bind('change',function(){scope.$apply(function(){modelSetter(scope,element[0].files[0]);console.log(scope);});});}};}]);app.service('fileUpload',function($http,$log,ImageFactory){this.upload=function(data,uploadUrl){var projectId=data.projectId;var fd=new FormData();for(var key in data){fd.append(key,data[key]);}return $http.post(uploadUrl,fd,{transformRequest:angular.identity,headers:{'Content-Type':undefined}}).then(function(res){return ImageFactory.getAllImages(projectId);}).then(function(array){return array;}).catch(function(){$log.error('error on fileUpload');});};});app.directive('fullstackLogo',function(){return{restrict:'E',templateUrl:'js/common/directives/fullstack-logo/fullstack-logo.html'};});app.directive('navbar',function($rootScope,AuthService,AUTH_EVENTS,$state){return{restrict:'EA',scope:{},templateUrl:'js/common/directives/navbar/navbar.html',link:function link(scope){scope.items=[{label:'Home',state:'home'},// { label: 'Editor', state: 'editor' },
{label:'Dashboard',state:'dashboard',auth:true}];scope.user=null;scope.isLoggedIn=function(){return AuthService.isAuthenticated();};scope.logout=function(){AuthService.logout().then(function(){$state.go('home');});};var setUser=function setUser(){AuthService.getLoggedInUser().then(function(user){scope.user=user;});};var removeUser=function removeUser(){scope.user=null;};setUser();$rootScope.$on(AUTH_EVENTS.loginSuccess,setUser);$rootScope.$on(AUTH_EVENTS.logoutSuccess,removeUser);$rootScope.$on(AUTH_EVENTS.sessionTimeout,removeUser);}};});app.directive('navbarEditor',function($rootScope,AuthService,AUTH_EVENTS,$state,PageFactory,$stateParams){return{restrict:'EA',scope:{},templateUrl:'js/common/directives/navbar-editor/navbar-editor.html',link:function link(scope,elem,attr){scope.items=[{label:'Home',state:'home'},{label:'Dashboard',state:'dashboard',auth:true}];scope.user=null;scope.isLoggedIn=function(){return AuthService.isAuthenticated();};scope.logout=function(){AuthService.logout().then(function(){$state.go('home');});};var setUser=function setUser(){AuthService.getLoggedInUser().then(function(user){scope.user=user;});};var removeUser=function removeUser(){scope.user=null;};setUser();//parses HTML from iFrame
scope.parseHtml=function(exportBool){$('#skeleton').contents().find('h1,h2,h3,h4,h5,h6,p,span,button,a').each(function(){$(this).removeClass('alreadyEditable changeThis dashedBorder');});if(exportBool){$("#skeleton").contents().find('[data-dragcontext-marker],.drop-marker,[class^="ui-resizable"], dashedBorder').remove();}var beforeHtml=$('#skeleton').contents().find("html").html();var html="<html>\n"+beforeHtml+"</html>";// saves HTML to backend
PageFactory.savePage({html:html,title:'index',projectId:$stateParams.projectId});};$("iframe").on("load",function(){var counter=0;//undo function
scope.undo=function(){if(counter<undoArray.length-1){counter++;$("#skeleton").contents().find("body").html(undoArray[undoArray.length-1-counter]);angular.element(document.getElementsByTagName('element-menu')[0]).scope().edit();}};scope.redo=function(){if(counter>0){counter--;$("#skeleton").contents().find("body").html(undoArray[undoArray.length-1-counter]);angular.element(document.getElementsByTagName('element-menu')[0]).scope().edit();}};});scope.download=function(){scope.parseHtml(true);var url="api/project/"+$stateParams.projectId+"/download/";window.open(url,'Download');};$rootScope.$on(AUTH_EVENTS.loginSuccess,setUser);$rootScope.$on(AUTH_EVENTS.logoutSuccess,removeUser);$rootScope.$on(AUTH_EVENTS.sessionTimeout,removeUser);}};});app.directive('navbarHome',function($rootScope,AuthService,AUTH_EVENTS,$state){return{restrict:'EA',scope:{},templateUrl:'js/common/directives/navbar-home/navbar-home.html',link:function link(scope){scope.items=[{label:'Home',state:'home'},// { label: 'Editor', state: 'editor' },
{label:'Dashboard',state:'dashboard',auth:true}];scope.user=null;scope.isLoggedIn=function(){return AuthService.isAuthenticated();};scope.logout=function(){AuthService.logout().then(function(){$state.go('home');});};var setUser=function setUser(){AuthService.getLoggedInUser().then(function(user){scope.user=user;});};var removeUser=function removeUser(){scope.user=null;};setUser();$rootScope.$on(AUTH_EVENTS.loginSuccess,setUser);$rootScope.$on(AUTH_EVENTS.logoutSuccess,removeUser);$rootScope.$on(AUTH_EVENTS.sessionTimeout,removeUser);}};});app.controller('ProjectCardCtrl',function($scope){});app.directive('projectCard',function(ProjectFactory){return{restrict:'E',templateUrl:'js/common/directives/project-card/project-card.html',scope:{projects:'='},link:function link(scope,element,attr){scope.deleteProject=function(projectId){ProjectFactory.deleteProject(projectId).then(function(){// deleteProject will remove directory files and db records
// update projects data so that deleted item will disappear
ProjectFactory.getAll().then(function(projects){scope.projects=projects;});});};}};});app.directive('randoGreeting',function(RandomGreetings){return{restrict:'E',templateUrl:'js/common/directives/rando-greeting/rando-greeting.html',link:function link(scope){scope.greeting=RandomGreetings.getRandomGreeting();}};});
//# sourceMappingURL=data:application/json;base64,
